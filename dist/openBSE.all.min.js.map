{"version":3,"sources":["node_modules/browser-pack/_prelude.js","build.json","src/app.js","src/browserNotSupportError.js","src/buildDate.json","src/bulletScreenEngine.js","src/bulletScreenType.js","src/lib/event.js","src/lib/helper.js","src/lib/linkedList.js","src/lib/renderers/baseRenderer.js","src/lib/renderers/canvasBaseRenderer.js","src/lib/renderers/canvasRenderer.js","src/lib/renderers/css3Renderer.js","src/lib/renderers/renderersFactory.js","src/lib/renderers/svgRenderer.js","src/lib/renderers/webglRenderer.js","src/openBSE.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","version","home","name","description","window","openBSE","BrowserNotSupportError","message","_this","_classCallCheck","this","_getPrototypeOf","concat","buildDate","_linkedList","_event2","_renderersFactory","_bulletScreenType2","_helper","BUILD","BulletScreenEngine","element","options","_startTime","renderMode","arguments","undefined","_playing","_lastRefreshTime","_options","_pauseTime","_bulletScreens","LinkedList","_bulletScreensOnScreen","_delayBulletScreensCount","_delay","_refreshRate","_defaultOptions","verticalInterval","playSpeed","clock","time","Date","getTime","scaling","timeOutDiscard","hiddenTypes","opacity","defaultStyle","shadowBlur","fontWeight","fontFamily","size","boxColor","color","borderColor","speed","residenceTime","_optionsType","_defaultBulletScreen","text","canDiscard","startTime","type","BulletScreenType","rightToLeft","_bulletScreenType","Helper","setValues","_event","Event","add","bind","unbind","_elementSize","width","clientWidth","height","clientHeight","_oldDevicePixelRatio","devicePixelRatio","_oldScaling","_oldClientWidth","_oldClientHeight","_oldHiddenTypes","_oldOpacity","_renderer","RenderersFactory","getRenderer","refresh","nowTime","getLength","times","Math","floor","bulletScreen","pop","style","getBulletScreenOnScreen","addBulletScreensToScreen","forEach","bulletScreenOnScreen","x","delete","remove","leftToRight","top","bottom","endTime","draw","requestAnimationFrame","creatAndgetWidth","parseInt","y","oldLength","nextBulletScreenOnScreen","addToUp","setActualY","stop","bulletScreenOnScreenWidthTime","nextBulletScreenOnScreenWidthTime","push","actualY","setInterval","setSize","setOptions","setOpacity","getOptions","addBulletScreen","TypeError","PARAMETERS_TYPE_ERROR","checkTypes","lastBulletScreen","play","pause","cleanBulletScreenList","clean","cleanScreen","cleanBulletScreenListOnScreen","hide","show","getVisibility","getRenderMode","getPlayState","getDebugInfo","bulletScreensOnScreenCount","bulletScreensCount","delay","delayBulletScreensCount","fps","console","info","EVENT_NAME_NOT_FOUND","eventList","fun","event","index","splice","trigger","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","value","err","return","setValue","defaultValue","returnValue","isEmpty","clone","checkType","_typeof","canBeNull","flat","item","isNaN","object","Object","prototype","toString","slice","toLowerCase","result","key","values","defaultValues","types","returnValues","_values","node","previous","topNode","bottomNode","l","thisNode","topToBottom","_return","newNode","BaseRenderer","elementSize","constructor","SyntaxError","_setOpacity","_hide","position","transform","webkitTransform","msTransform","transformOrigin","webkitTransformOrigin","msTransformOrigin","visibility","getOpacity","checkWhetherHide","_baseRenderer","CanvasBaseRenderer","bulletScreensOnScreen","_devicePixelRatio","canvas","_canvas","document","createElement","innerHTML","appendChild","getBulletScreenOnScreenByLocation","location","_checkWhetherHide","x1","x2","y1","y2","getLocation","offsetX","layerX","pageX","doc","documentElement","body","clientX","scrollLeft","clientLeft","pageY","clientY","scrollTop","clientTop","offsetLeft","offsetParent","getOffsetLeft","target","layerY","offsetTop","getOffsetTop","offsetY","oncontextmenu","onclick","registerEvent","hideCanvas","hideCanvasContext","getContext","font","measureText","shadowColor","textX","textY","fillStyle","fillText","lineWidth","strokeStyle","strokeText","strokeRect","_setSize","getDevicePixelRatio","getCanvas","_canvasBaseRenderer","_browserNotSupportError","CanvasRenderer","context","supportCheck","clearRect","_this2","drawImage","canvasContext","CSS3Renderer","div","_div","overflow","padding","margin","userSelect","webkitUserSelect","msUserSelect","cursor","bulletScreenDiv","whiteSpace","fontSize","lineHeight","textShadow","textStroke","webkitTextStroke","textStrokeColor","webkitTextStrokeColor","border","createTextNode","removeChild","RENDERERS","css3","svg","SVGRenderer","webgl","WebGLRenderer","renderer","createElementNS","createElementSVG","createSVGRect","_svg","_defsSvg","setAttribute","eventDiv","right","left","init","textSvg","filterId","filterSvg","getElementById","id","feOffsetSvg","feGaussianBlurSvg","feBlendSvg","bulletScreenCount","getComputedTextLength","rectSvg","rect","qualifiedName","_webglContext","_positionAttributeLocation","_resolutionUniformLocation","createShader","gl","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","deleteShader","enable","BLEND","clearColor","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","vertexShader","VERTEX_SHADER","vertexShaderSource","fragmentShader","FRAGMENT_SHADER","fragmentShaderSource","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","deleteProgram","useProgram","getAttribLocation","texcoordAttributeLocation","getUniformLocation","viewport","uniform2f","texcoordBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","FLOAT","bufferData","Float32Array","STATIC_DRAW","clear","COLOR_BUFFER_BIT","bindTexture","TEXTURE_2D","texture2D","positionBuffer","drawArrays","TRIANGLES","_creatAndgetWidth","texture","createTexture","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","RGBA","UNSIGNED_BYTE","getVersion"],"mappings":"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","file":"openBSE.all.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","module.exports={\r\n    \"version\": \"2.0-Beta\",\r\n    \"home\": \"https://iamscottxu.github.io/openBSE/\",\r\n    \"name\": \"openBSE\",\r\n    \"description\": \"openBSE is a high-performance JavaScript bullet-screen (danmaku) engine.\"\r\n}","window.openBSE = require('./openBSE').openBSE;","/** \r\n * 浏览器不支持所引发的错误\r\n * @deprecated 浏览器不支持所引发的错误。有关基类的详细信息，请参阅 MDN [Error]{@link https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error} 。\r\n * @alias openBSE.BrowserNotSupportError\r\n * @extends Error\r\n */\r\nclass BrowserNotSupportError extends Error {\r\n    /**\r\n     * 创建一个异常对象\r\n     * @param {string} message - 消息\r\n     */\r\n    constructor(message) {\r\n        super(`This browser does not support \"${message}\".`);\r\n        this.name = \"BrowserNotSupportError\";\r\n    }\r\n}\r\n\r\nexport { BrowserNotSupportError }","module.exports={\"buildDate\":\"Sat, 12 Jan 2019 05:28:57 GMT\"}","import { LinkedList } from './lib/linkedList'\r\nimport { Event } from './lib/event'\r\nimport { RenderersFactory } from './lib/renderers/renderersFactory'\r\nimport { BulletScreenType } from './bulletScreenType'\r\nimport { Helper } from './lib/helper'\r\n\r\nconst BUILD = require('../build.json');\r\nBUILD.buildDate = require('./buildDate.json').buildDate;\r\n\r\n/** \r\n * 弹幕引擎对象类 \r\n * @alias openBSE.BulletScreenEngine\r\n * @throws {openBSE.BrowserNotSupportError} 浏览器不支持特定渲染模式时引发错误。\r\n * @throws {TypeError} 传入的参数错误时引发错误。请参阅 MDN [TypeError]{@link https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError} 。\r\n */\r\nclass BulletScreenEngine {\r\n    /**\r\n     * 创建一个弹幕引擎对象。\r\n     * @param {Element} element - 要加载弹幕的元素：有关 Element 接口的信息请参阅MDN [Element]{@link https://developer.mozilla.org/zh-CN/docs/Web/API/Element} 。\r\n     * @param {openBSE~Options} [_options] - 全局选项：一个 {@link openBSE~Options} 结构。\r\n     * @param {string} [renderMode=\"canvas\"] - 渲染模式：默认为“canvas”, “可选css3”， “webgl”和“svg”。\r\n     */\r\n    constructor(element, options, renderMode = 'canvas') {\r\n        //变量初始化\r\n        /**\r\n         * 开始时间\r\n         * @private @type {number}\r\n         */\r\n        let _startTime;\r\n        /**\r\n         * 暂停时间\r\n         * @private @type {number}\r\n         */\r\n        let _pauseTime = 0;\r\n        /**\r\n         * 剩余弹幕\r\n         * @private @type {LinkedList}\r\n         */\r\n        let _bulletScreens = new LinkedList();\r\n        /**\r\n         * 屏幕上的弹幕\r\n         * @private @type {LinkedList}\r\n         */\r\n        let _bulletScreensOnScreen = new LinkedList();\r\n        /**\r\n         * 延迟弹幕总数\r\n         * @private @type {number}\r\n         */\r\n        let _delayBulletScreensCount = 0;\r\n        /**\r\n         * 延迟（单位：毫秒）\r\n         * @private @type {number}\r\n         */\r\n        let _delay = 0;\r\n        /**\r\n         * 播放标志\r\n         * @private @type {boolean}\r\n         */\r\n        let _playing;\r\n        /**\r\n         * 刷新频率\r\n         * @private @type {number}\r\n         */\r\n        let _refreshRate = 0.06; //初始刷新频率\r\n        /**\r\n         * 上一次刷新时间\r\n         * @private @type {number}\r\n         */\r\n        let _lastRefreshTime;\r\n        /**\r\n         * 全局选项\r\n         * @private @type {openBSE~Options}\r\n         */\r\n        let _options;\r\n        /**\r\n         * 默认全局变量\r\n         * @private @readonly\r\n         */\r\n        const _defaultOptions = {\r\n            /** 垂直间距 */\r\n            verticalInterval: 8,\r\n            /** 播放速度(倍数) */\r\n            playSpeed: 1,\r\n            /** 时间基准 */\r\n            clock: time => new Date().getTime() - _startTime,\r\n            /** 缩放比例 */\r\n            scaling: 1,\r\n            /** 超时丢弃 */\r\n            timeOutDiscard: true,\r\n            /** 要隐藏的弹幕类型 */\r\n            hiddenTypes: 0,\r\n            /** 弹幕不透明度 */\r\n            opacity: 1,\r\n            /** 默认弹幕样式 */\r\n            defaultStyle: {\r\n                /** 阴影的模糊级别，0为不显示阴影 */\r\n                shadowBlur: 2,\r\n                /** 字体粗细 */\r\n                fontWeight: '600',\r\n                /** 字体系列 */\r\n                fontFamily: 'sans-serif',\r\n                /** 字体大小（单位：像素） */\r\n                size: 19,\r\n                /** 外框颜色 */\r\n                boxColor: null,\r\n                /** 字体颜色 */\r\n                color: 'white',\r\n                /** 描边颜色 */\r\n                borderColor: null,\r\n                /** 弹幕速度（单位：像素/毫秒） 仅流弹幕类型有效 */\r\n                speed: 0.15,\r\n                /** 弹幕停留时间 仅固定弹幕类型有效 */\r\n                residenceTime: 5000\r\n            }\r\n        }\r\n\r\n        /**\r\n         * 全局选项类型\r\n         * @private @readonly\r\n         */\r\n        const _optionsType = {\r\n            verticalInterval: 'number',\r\n            playSpeed: 'number',\r\n            clock: 'function',\r\n            scaling: 'number',\r\n            timeOutDiscard: 'boolean',\r\n            hiddenTypes: 'number',\r\n            opacity: 'number',\r\n            defaultStyle: {\r\n                shadowBlur: 'number',\r\n                fontWeight: ['string', 'number'],\r\n                fontFamily: 'string',\r\n                size: 'number',\r\n                boxColor: ['string', 'null'],\r\n                color: 'string',\r\n                borderColor: ['string', 'null'],\r\n                speed: 'number',\r\n                residenceTime: 'number'\r\n            }\r\n        }\r\n\r\n        /**\r\n         * 默认弹幕数据\r\n         * @private @readonly\r\n         */\r\n        const _defaultBulletScreen = {\r\n            /** 弹幕文本 */\r\n            text: null,\r\n            /** 是否允许丢弃 */\r\n            canDiscard: true,\r\n            /** 弹幕进入时间 */\r\n            startTime: null,\r\n            /** 弹幕类型 */\r\n            type: BulletScreenType.rightToLeft\r\n        }\r\n\r\n        /**\r\n         * 弹幕数据类型\r\n         * @private @readonly\r\n         */\r\n        const _bulletScreenType = {\r\n            text: 'string',\r\n            canDiscard: 'boolean',\r\n            startTime: 'number',\r\n            type: 'number'\r\n        }\r\n\r\n        _options = Helper.setValues(options, _defaultOptions, _optionsType); //设置默认值\r\n\r\n        //事件初始化\r\n        let _event = new Event();\r\n        /**\r\n         * 弹幕单击事件。当单击弹幕时触发。\r\n         * @event openBSE.BulletScreenEngine#click\r\n         * @param {openBSE~BulletScreen} e.bulletScreen - 被单击的弹幕的数据：一个 {@link openBSE~BulletScreen} 结构。（注意：不要试图与[添加弹幕]{@link openBSE.BulletScreenEngine#addBulletScreen}时创建的对象进行比较，这个对象是克隆得到的，并不相等。正确的方法是在添加弹幕时一并插入 id 等自定义字段来唯一标识一条弹幕。）\r\n         */\r\n        _event.add('click');\r\n        /**\r\n         * 弹幕上下文菜单事件。当触发弹幕上下文菜单时触发。\r\n         * @event openBSE.BulletScreenEngine#contextmenu\r\n         * @param {openBSE~BulletScreen} e.bulletScreen - 被单击的弹幕的数据：一个 {@link openBSE~BulletScreen} 结构。（注意：不要试图与[添加弹幕]{@link openBSE.BulletScreenEngine#addBulletScreen}时创建的对象进行比较，这个对象是克隆得到的，并不相等。正确的方法是在添加弹幕时一并插入 id 等自定义字段来唯一标识一条弹幕。）\r\n         */\r\n        _event.add('contextmenu');\r\n        /**\r\n         * 绑定事件处理程序\r\n         * @function\r\n         * @description 绑定事件处理程序。当事件处理程序返回值为 false 时停止冒泡。\r\n         * @param {string} name - 事件名称\r\n         * @param {function} fun - 事件处理程序\r\n         * @listens openBSE.BulletScreenEngine#click\r\n         * @listens openBSE.BulletScreenEngine#contextmenu\r\n         * @throws {TypeError} 传入的参数错误或事件不存在时引发错误。请参阅 MDN [TypeError]{@link https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError} 。\r\n         */\r\n        this.bind = _event.bind;\r\n        /**\r\n         * 解绑事件处理程序（fun为空解绑所有事件处理程序）\r\n         * @function\r\n         * @param {string} name - 事件名称\r\n         * @param {function} fun - 事件处理程序\r\n         * @throws {TypeError} 传入的参数错误或事件不存在时引发错误。请参阅 MDN [TypeError]{@link https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError} 。\r\n         */\r\n        this.unbind = _event.unbind;\r\n        //初始化\r\n        let _elementSize = {\r\n            width: element.clientWidth / _options.scaling,\r\n            height: element.clientHeight / _options.scaling\r\n        }\r\n        let _oldDevicePixelRatio = window.devicePixelRatio;\r\n        let _oldScaling = _options.scaling;\r\n        let _oldClientWidth = element.clientWidth;\r\n        let _oldClientHeight = element.clientHeight;\r\n        let _oldHiddenTypes = _options.hiddenTypes;\r\n        let _oldOpacity = _options.opacity;\r\n        //渲染器工厂\r\n        let renderersFactory = new RenderersFactory(element, _options, _elementSize, _event, _bulletScreensOnScreen);\r\n        let _renderer = renderersFactory.getRenderer(renderMode); //实例化渲染器\r\n        setInterval(setSize, 100);\r\n\r\n        //公共函数\r\n\r\n        /**\r\n         * 设置全局选项\r\n         * @param {openBSE~Options} options - 全局选项：一个 {@link openBSE~Options} 结构。\r\n         * @throws {TypeError} 传入的参数错误时引发错误。请参阅 MDN [TypeError]{@link https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError} 。\r\n         */\r\n        this.setOptions = function (options) {\r\n            _options = Helper.setValues(options, _options, _optionsType, false); //设置默认值\r\n            if (_oldHiddenTypes != _options.hiddenTypes) {\r\n                _oldHiddenTypes = _options.hiddenTypes;\r\n                if (!_playing) _renderer.draw(); //非播放状态则重绘\r\n            }\r\n            if ( _oldOpacity != _options.opacity) {\r\n                _oldOpacity = _options.opacity;\r\n                _renderer.setOpacity();\r\n            }\r\n        };\r\n\r\n        /**\r\n         * 获取全局选项\r\n         * @returns {openBSE~Options} 全局选项：一个 {@link openBSE~Options} 结构。\r\n         */\r\n        this.getOptions = () => _options;\r\n\r\n        /**\r\n         * 添加弹幕到弹幕列表。\r\n         * @description 添加弹幕到弹幕列表。由于弹幕在屏幕上出现过后，弹幕引擎将从列表中彻底删除此弹幕。所以，在改变播放进度时，可能需要先[清空弹幕列表]{@link openBSE.BulletScreenEngine#cleanBulletScreenList}，然后重新加载此播放进度以后的弹幕。\r\n         * @param {openBSE~BulletScreen} bulletScreen - 单条弹幕数据：一个 {@link openBSE~BulletScreen} 结构。\r\n         * @throws {TypeError} 传入的参数错误时引发错误。请参阅 MDN [TypeError]{@link https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError} 。\r\n         */\r\n        this.addBulletScreen = function (bulletScreen) {\r\n            _defaultBulletScreen.startTime = _options.clock();\r\n            bulletScreen = Helper.setValues(bulletScreen, _defaultBulletScreen, _bulletScreenType); //设置默认值\r\n\r\n            if (\r\n                bulletScreen.type != BulletScreenType.leftToRight &&\r\n                bulletScreen.type != BulletScreenType.rightToLeft &&\r\n                bulletScreen.type != BulletScreenType.top &&\r\n                bulletScreen.type != BulletScreenType.bottom\r\n            ) throw new TypeError(Helper.PARAMETERS_TYPE_ERROR);\r\n\r\n            Helper.checkTypes(bulletScreen.style, _optionsType.defaultStyle); //检查弹幕样式类型\r\n\r\n            let oldLength = _bulletScreens.getLength();\r\n            _bulletScreens.forEach(function (lastBulletScreen) {\r\n                if (bulletScreen.startTime > lastBulletScreen.startTime)\r\n                    return {\r\n                        add: {\r\n                            addToUp: true,\r\n                            element: bulletScreen\r\n                        },\r\n                        stop: true\r\n                    };\r\n            }, true);\r\n            if (oldLength === _bulletScreens.getLength())\r\n                _bulletScreens.push(bulletScreen, false);\r\n\r\n        };\r\n\r\n        /**\r\n         * 开始播放弹幕。\r\n         */\r\n        this.play = function () {\r\n            if (!_playing) {\r\n                if (!_startTime)\r\n                    _startTime = new Date().getTime();\r\n                if (_pauseTime)\r\n                    _startTime += _options.clock() - _pauseTime;\r\n                _lastRefreshTime = null;\r\n                _playing = true;\r\n                requestAnimationFrame(refresh);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * 暂停播放弹幕。\r\n         * @description 暂停播放弹幕。暂停播放弹幕是指弹幕播放暂停，所有未出现的弹幕将停止出现，已出现的弹幕停止运动，停止消失。\r\n         */\r\n        this.pause = function () {\r\n            if (_playing) {\r\n                _pauseTime = _options.clock();\r\n                _playing = false;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * 清空弹幕列表。\r\n         * @description 清空弹幕列表，但屏幕上已经出现的弹幕不会被清除。\r\n         */\r\n        this.cleanBulletScreenList = function () {\r\n            _bulletScreens.clean();\r\n        };\r\n\r\n        /**\r\n         * 清空屏幕内容。\r\n         * @description 清空屏幕内容。清空屏幕上已经出现的弹幕，不包括弹幕列表中的弹幕。\r\n         */\r\n        this.cleanScreen = function () {\r\n            _bulletScreensOnScreen.clean();\r\n            _renderer.cleanScreen();\r\n        };\r\n\r\n        /**\r\n         * 停止播放弹幕。\r\n         * @description 停止播放弹幕。停止播放弹幕是指停止播放弹幕，默认[时间基准（options.clock）]{@link openBSE~BulletScreenStyle}归零，并[清空弹幕列表]{@link openBSE.BulletScreenEngine#cleanBulletScreenList}、[清空屏幕弹幕]{@link openBSE.BulletScreenEngine#cleanBulletScreenListOnScreen}。\r\n         */\r\n        this.stop = function () {\r\n            if (_playing) {\r\n                this.pause();\r\n            }\r\n            this.cleanBulletScreenList();\r\n            this.cleanBulletScreenListOnScreen();\r\n            _pauseTime = 0;\r\n            _startTime = null;\r\n        };\r\n\r\n        /**\r\n         * 隐藏弹幕。\r\n         * @function\r\n         */\r\n        this.hide = _renderer.hide;\r\n\r\n        /**\r\n         * 显示弹幕。\r\n         * @function\r\n         */\r\n        this.show = _renderer.show;\r\n\r\n        /**\r\n         * 获取弹幕可见性。\r\n         * @function\r\n         * @returns {boolean} - 指示弹幕是否可见。\r\n         * @description 获取弹幕可见性。如要显示弹幕请调用 [bulletScreenEngine.show();]{@link openBSE.BulletScreenEngine#show} ，要隐藏弹幕请调用 [bulletScreenEngine.hide();]{@link openBSE.BulletScreenEngine#hide} 。\r\n         */\r\n        this.getVisibility = _renderer.getVisibility;\r\n        /**\r\n         * 获取渲染模式。\r\n         * @returns {string} - 弹幕渲染模式： 取值为“canvas”、“css3”、“webgl”或“svg”。\r\n         */\r\n        this.getRenderMode = () => renderMode;\r\n\r\n        /**\r\n         * 获取播放状态。\r\n         * @returns {boolean} - 正在播放标志：true：正在播放；false：已暂停/停止播放。\r\n         */\r\n        this.getPlayState = () => _playing;\r\n\r\n        /**\r\n        * 获取调试信息。\r\n        * @returns {openBSE~DebugInfo} - 调试信息：一个 {@link openBSE~DebugInfo} 结构。\r\n        */\r\n        this.getDebugInfo = function () {\r\n            return {\r\n                time: _playing ? _options.clock() : _pauseTime,\r\n                bulletScreensOnScreenCount: _bulletScreensOnScreen.getLength(),\r\n                bulletScreensCount: _bulletScreens.getLength(),\r\n                delay: _delay,\r\n                delayBulletScreensCount: _delayBulletScreensCount,\r\n                fps: _playing ? Math.floor(_refreshRate * 1000) : 0 //帧频\r\n            };\r\n        };\r\n\r\n        //内部函数\r\n\r\n        /**\r\n         * 刷新弹幕函数\r\n         * @private\r\n         */\r\n        function refresh() {\r\n            let nowTime = new Date().getTime();\r\n            if (_lastRefreshTime != null)\r\n                _refreshRate = 1 / (nowTime - _lastRefreshTime);\r\n            _lastRefreshTime = nowTime;\r\n            addBulletScreensToScreen();\r\n            moveBulletScreenOnScreen();\r\n            _renderer.draw(); //绘制弹幕\r\n            if (_playing)\r\n                requestAnimationFrame(refresh);\r\n        }\r\n\r\n        /**\r\n         * 移动弹幕函数\r\n         * @private\r\n         */\r\n        function moveBulletScreenOnScreen() {\r\n            _bulletScreensOnScreen.forEach((bulletScreenOnScreen) => {\r\n                let nowTime = _options.clock();\r\n                switch (bulletScreenOnScreen.bulletScreen.type) {\r\n                    case BulletScreenType.rightToLeft:\r\n                        if (bulletScreenOnScreen.x > -bulletScreenOnScreen.width) {\r\n                            bulletScreenOnScreen.x -= bulletScreenOnScreen.bulletScreen.style.speed * _options.playSpeed / _refreshRate;\r\n                        }\r\n                        else {\r\n                            _renderer.delete(bulletScreenOnScreen);\r\n                            return { remove: true };\r\n                        }\r\n                        break;\r\n                    case BulletScreenType.leftToRight:\r\n                        if (bulletScreenOnScreen.x < _elementSize.width) {\r\n                            bulletScreenOnScreen.x += bulletScreenOnScreen.bulletScreen.style.speed * _options.playSpeed / _refreshRate;\r\n                        }\r\n                        else {\r\n                            _renderer.delete(bulletScreenOnScreen);\r\n                            return { remove: true };\r\n                        }\r\n                        break;\r\n                    case BulletScreenType.top:\r\n                    case BulletScreenType.bottom:\r\n                        if (bulletScreenOnScreen.endTime < nowTime) {\r\n                            _renderer.delete(bulletScreenOnScreen);\r\n                            return { remove: true };\r\n                        }\r\n                        break;\r\n                }\r\n            }, true);\r\n        }\r\n\r\n        /**\r\n         * 添加弹幕到屏幕函数\r\n         * @private\r\n         */\r\n        function addBulletScreensToScreen() {\r\n            if (_bulletScreensOnScreen.getLength() === 0)\r\n                _delay = 0;\r\n            let times = Math.floor(_refreshRate * 2000);\r\n            do {\r\n                let bulletScreen = _bulletScreens.pop(false, false);\r\n                if (bulletScreen === null)\r\n                    return;\r\n                let nowTime = _options.clock();\r\n                if (bulletScreen.startTime > nowTime)\r\n                    return;\r\n                if (!_options.timeOutDiscard || !bulletScreen.canDiscard || bulletScreen.startTime > nowTime - Math.floor(1 / _refreshRate) * 60) {\r\n                    bulletScreen.style = Helper.setValues(bulletScreen.style, _options.defaultStyle, _optionsType.defaultStyle); //填充默认样式\r\n                    getBulletScreenOnScreen(nowTime, bulletScreen); //生成屏幕弹幕对象并添加到屏幕弹幕集合\r\n                }\r\n                else\r\n                    _delayBulletScreensCount++;\r\n                _bulletScreens.pop(true, false);\r\n                times--;\r\n            } while (_bulletScreensOnScreen.getLength() === 0 || times > 0);\r\n        }\r\n\r\n        /**\r\n         * 生成屏幕弹幕对象函数\r\n         * @private\r\n         * @param {number} nowTime - 当前时间\r\n         * @param {openBSE~BulletScreen} bulletScreen - 弹幕\r\n         */\r\n        function getBulletScreenOnScreen(nowTime, bulletScreen) {\r\n            _delay = nowTime - bulletScreen.startTime;\r\n            let bulletScreenOnScreen = {};\r\n            bulletScreenOnScreen.bulletScreen = bulletScreen;\r\n            bulletScreenOnScreen.startTime = nowTime; //弹幕头部进屏幕时间\r\n            bulletScreenOnScreen.size = bulletScreenOnScreen.bulletScreen.style.size;\r\n            bulletScreenOnScreen.height = bulletScreenOnScreen.size; //弹幕的高度：像素\r\n            _renderer.creatAndgetWidth(bulletScreenOnScreen); //创建弹幕元素并计算宽度\r\n            switch (bulletScreen.type) {\r\n                case BulletScreenType.rightToLeft:\r\n                    bulletScreenOnScreen.endTime = parseInt(nowTime + (_elementSize.width + bulletScreenOnScreen.width) / (bulletScreen.style.speed * _options.playSpeed)); //弹幕尾部出屏幕的时间\r\n                    bulletScreenOnScreen.x = _elementSize.width; //弹幕初始X坐标\r\n                    bulletScreenOnScreen.y = _options.verticalInterval; //弹幕初始Y坐标\r\n                    break;\r\n                case BulletScreenType.leftToRight:\r\n                    bulletScreenOnScreen.endTime = parseInt(nowTime + (_elementSize.width + bulletScreenOnScreen.width) / (bulletScreen.style.speed * _options.playSpeed)); //弹幕尾部出屏幕的时间\r\n                    bulletScreenOnScreen.x = -bulletScreenOnScreen.width; //弹幕初始X坐标\r\n                    bulletScreenOnScreen.y = _options.verticalInterval; //弹幕初始Y坐标\r\n                    break;\r\n                case BulletScreenType.top:\r\n                    bulletScreenOnScreen.endTime = bulletScreenOnScreen.startTime + bulletScreen.style.residenceTime * _options.playSpeed;\r\n                    bulletScreenOnScreen.x = parseInt((_elementSize.width - bulletScreenOnScreen.width) / 2); //弹幕初始X坐标\r\n                    bulletScreenOnScreen.y = _options.verticalInterval; //弹幕初始Y坐标\r\n                    break;\r\n                case BulletScreenType.bottom:\r\n                    bulletScreenOnScreen.endTime = bulletScreenOnScreen.startTime + bulletScreen.style.residenceTime * _options.playSpeed;\r\n                    bulletScreenOnScreen.x = parseInt((_elementSize.width - bulletScreenOnScreen.width) / 2); //弹幕初始X坐标\r\n                    bulletScreenOnScreen.y = -_options.verticalInterval - bulletScreenOnScreen.height; //弹幕初始Y坐标\r\n                    break;\r\n            }\r\n            let oldLength = _bulletScreensOnScreen.getLength();\r\n            if (bulletScreen.type === BulletScreenType.top || bulletScreen.type === BulletScreenType.bottom) {\r\n                _bulletScreensOnScreen.forEach((nextBulletScreenOnScreen) => {\r\n                    //弹幕不在流中，是固定弹幕\r\n                    if (nextBulletScreenOnScreen.bulletScreen.type != bulletScreen.type)\r\n                        return; //不是同一种类型的弹幕\r\n                    if (bulletScreen.type === BulletScreenType.top) {\r\n                        //如果新弹幕在当前弹幕上方且未与当前弹幕重叠\r\n                        if (bulletScreenOnScreen.y + bulletScreenOnScreen.height < nextBulletScreenOnScreen.y)\r\n                            return { add: { addToUp: true, element: setActualY(bulletScreenOnScreen) }, stop: true };\r\n                        //如果上一条弹幕的消失时间小于当前弹幕的出现时间\r\n                        if (nextBulletScreenOnScreen.endTime < nowTime)\r\n                            bulletScreenOnScreen.y = nextBulletScreenOnScreen.y;\r\n                        else\r\n                            bulletScreenOnScreen.y = nextBulletScreenOnScreen.y + nextBulletScreenOnScreen.height + _options.verticalInterval;\r\n                    }\r\n                    else {\r\n                        //如果新弹幕在当前弹幕下方且未与当前弹幕重叠\r\n                        if (bulletScreenOnScreen.y > nextBulletScreenOnScreen.y + nextBulletScreenOnScreen.height) {\r\n                            return { add: { addToUp: true, element: setActualY(bulletScreenOnScreen) }, stop: true };\r\n                        }\r\n                        //如果上一条弹幕的消失时间小于当前弹幕的出现时间\r\n                        if (nextBulletScreenOnScreen.endTime < nowTime)\r\n                            bulletScreenOnScreen.y = nextBulletScreenOnScreen.y;\r\n                        else\r\n                            bulletScreenOnScreen.y = nextBulletScreenOnScreen.y - bulletScreenOnScreen.height - _options.verticalInterval;\r\n                    }\r\n                }, true);\r\n            }\r\n            else {\r\n                //当前弹幕经过一个点需要的总时长\r\n                let bulletScreenOnScreenWidthTime = bulletScreenOnScreen.width / (bulletScreen.style.speed * _options.playSpeed);\r\n                _bulletScreensOnScreen.forEach((nextBulletScreenOnScreen) => {\r\n                    //弹幕在流中，是移动弹幕\r\n                    if (nextBulletScreenOnScreen.bulletScreen.type === BulletScreenType.top || nextBulletScreenOnScreen.bulletScreen.type === BulletScreenType.bottom)\r\n                        return; //弹幕不在流中，为固定弹幕\r\n                    //如果新弹幕在当前弹幕上方且未与当前弹幕重叠\r\n                    if (bulletScreenOnScreen.y + bulletScreenOnScreen.height < nextBulletScreenOnScreen.y)\r\n                        return { add: { addToUp: true, element: setActualY(bulletScreenOnScreen) }, stop: true };\r\n                    //上一条弹幕经过一个点需要的总时长\r\n                    let nextBulletScreenOnScreenWidthTime = nextBulletScreenOnScreen.width / (nextBulletScreenOnScreen.bulletScreen.style.speed * _options.playSpeed);\r\n                    //如果上一条弹幕的消失时间小于当前弹幕的出现时间\r\n                    if (nextBulletScreenOnScreen.startTime + nextBulletScreenOnScreenWidthTime >= nowTime || //如果上一条弹幕的头进入了，但是尾还没进入\r\n                        nextBulletScreenOnScreen.endTime >= bulletScreenOnScreen.endTime - bulletScreenOnScreenWidthTime) //如果当前弹幕头出去了，上一条弹幕尾还没出去\r\n                        bulletScreenOnScreen.y = nextBulletScreenOnScreen.y + nextBulletScreenOnScreen.height + _options.verticalInterval;\r\n                    else\r\n                        bulletScreenOnScreen.y = nextBulletScreenOnScreen.y;\r\n                }, true);\r\n            }\r\n            if (_bulletScreensOnScreen.getLength() === oldLength)\r\n                _bulletScreensOnScreen.push(setActualY(bulletScreenOnScreen), false);\r\n        }\r\n\r\n        /**\r\n         * 设置真实的Y坐标\r\n         * @private\r\n         * @param {object} bulletScreenOnScreen - 屏幕弹幕事件\r\n         * @returns {object} 屏幕弹幕事件\r\n         */\r\n        function setActualY(bulletScreenOnScreen) {\r\n            let bulletScreen = bulletScreenOnScreen.bulletScreen;\r\n            if (\r\n                bulletScreen.type === BulletScreenType.leftToRight ||\r\n                bulletScreen.type === BulletScreenType.rightToLeft ||\r\n                bulletScreen.type === BulletScreenType.top\r\n            ) {\r\n                bulletScreenOnScreen.actualY = bulletScreenOnScreen.y % (_elementSize.height - bulletScreenOnScreen.height);\r\n            }\r\n            else if (bulletScreen.type === BulletScreenType.bottom) {\r\n                bulletScreenOnScreen.actualY = _elementSize.height + bulletScreenOnScreen.y % _elementSize.height;\r\n            }\r\n            return bulletScreenOnScreen;\r\n        }\r\n\r\n        /**\r\n         * 设置尺寸\r\n         * @private\r\n         */\r\n        function setSize() {\r\n            if (_oldDevicePixelRatio != window.devicePixelRatio ||\r\n                _oldClientWidth != element.clientWidth ||\r\n                _oldClientHeight != element.clientHeight ||\r\n                _oldScaling != _options.scaling) {\r\n                _oldScaling = _options.scaling;\r\n                _elementSize.width = element.clientWidth / _options.scaling;\r\n                _elementSize.height = element.clientHeight / _options.scaling;\r\n                _oldClientWidth = element.clientWidth;\r\n                _oldClientHeight = element.clientHeight;\r\n                _oldDevicePixelRatio = window.devicePixelRatio;\r\n                _renderer.setSize();\r\n                if (!_playing) _renderer.draw(); //非播放状态则重绘\r\n            }\r\n        }\r\n\r\n        console.info(\r\n            '%c%s%c now loaded.\\n\\n%cVersion: %s\\nBuild Date: %s\\n\\n%c%s\\nHome: %s',\r\n            'font-weight:bold; color:#0099FF;', BUILD.name, '', 'font-style:italic;',\r\n            BUILD.version, BUILD.buildDate, '', BUILD.description, BUILD.home\r\n        );\r\n    }\r\n}\r\nexport { BulletScreenEngine }","/**\r\n * 弹幕类型枚举\r\n * @alias openBSE.BulletScreenType\r\n * @readonly\r\n * @enum {number}\r\n */\r\nconst BulletScreenType = {\r\n    /** \r\n     * 从右到左弹幕\r\n     * @readonly\r\n     */\r\n    rightToLeft: 1,\r\n    /** \r\n     * 从左到右弹幕（逆向弹幕）\r\n     * @readonly\r\n     */\r\n    leftToRight: 2,\r\n    /** \r\n     * 顶部弹幕\r\n     * @readonly\r\n     */\r\n    top: 4,\r\n    /** \r\n     * 底部弹幕\r\n     * @readonly\r\n     */\r\n    bottom: 8\r\n}\r\n\r\nexport { BulletScreenType }","import { Helper } from './helper'\r\n\r\nconst EVENT_NAME_NOT_FOUND = 'Event name not found.'\r\nconst EVENT_ALREADY_EXISTS = 'Event already exists.'\r\n\r\n/**\r\n * 事件模型类\r\n */\r\nclass Event {\r\n    /**\r\n     * 创建一个新的事件模型。\r\n     */\r\n    constructor() {\r\n        /**\r\n         * 事件列表\r\n         * @private\r\n         */\r\n        let eventList = {};\r\n        /**\r\n         * 添加事件\r\n         * @public\r\n         * @param {string} name - 事件名称\r\n         * @throws {TypeError} 传入的参数错误或事件已存在时引发错误。请参阅 MDN [TypeError]{@link https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError} 。\r\n         */\r\n        this.add = function (name) {\r\n            if (typeof name != 'string') throw new TypeError(Helper.PARAMETERS_TYPE_ERROR);\r\n            if (typeof eventList[name] != 'undefined') throw new TypeError(EVENT_ALREADY_EXISTS);\r\n            eventList[name] = [];\r\n        };\r\n        /**\r\n         * 删除事件\r\n         * @public\r\n         * @param {string} name - 事件名称\r\n         * @throws {TypeError} 传入的参数错误或事件不存在时引发错误。请参阅 MDN [TypeError]{@link https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError} 。\r\n         */\r\n        this.remove = function (name) {\r\n            if (typeof name != 'string') throw new TypeError(Helper.PARAMETERS_TYPE_ERROR);\r\n            if (typeof eventList[name] === 'undefined') throw new TypeError(EVENT_NAME_NOT_FOUND);\r\n            delete (eventList[name]);\r\n        };\r\n        /**\r\n         * 绑定事件处理程序\r\n         * @public\r\n         * @param {string} name - 事件名称\r\n         * @param {function} fun - 事件处理程序\r\n         * @returns {number} 添加后的事件数\r\n         * @throws {TypeError} 传入的参数错误或事件不存在时引发错误。请参阅 MDN [TypeError]{@link https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError} 。\r\n         */\r\n        this.bind = function (name, fun) {\r\n            if (typeof name != 'string' || typeof fun != 'function') throw new TypeError(Helper.PARAMETERS_TYPE_ERROR);\r\n            let event = eventList[name];\r\n            if (typeof event === 'undefined') throw new TypeError(EVENT_NAME_NOT_FOUND);\r\n            for (let index in event) {\r\n                if (event[index] === fun)\r\n                    return false;\r\n            }\r\n            return event.push(fun);\r\n        };\r\n        /**\r\n         * 解绑事件处理程序（fun为空解绑所有事件处理程序）\r\n         * @public\r\n         * @param {string} name - 事件名称\r\n         * @param {function} fun - 事件处理程序\r\n         * @returns {number} 删除后的事件数\r\n         * @throws {TypeError} 传入的参数错误或事件不存在时引发错误。请参阅 MDN [TypeError]{@link https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError} 。\r\n         */\r\n        this.unbind = function (name, fun) {\r\n            if (typeof name != 'string' || typeof fun != 'function') throw new TypeError(Helper.PARAMETERS_TYPE_ERROR);\r\n            let event = eventList[name];\r\n            if (typeof event === 'undefined') throw new TypeError(EVENT_NAME_NOT_FOUND);\r\n            if (typeof fun != 'function') eventList[name] = [];\r\n            else {\r\n                for (let index in event) {\r\n                    if (event[index] === fun) {\r\n                        event.splice(fun, 1);\r\n                        return event.length;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * 触发事件\r\n         * @public\r\n         * @param {string} name - 事件名称\r\n         * @param {object} e - 事件数据\r\n         * @throws {TypeError} 传入的参数错误或事件不存在时引发错误。请参阅 MDN [TypeError]{@link https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError} 。\r\n         */\r\n        this.trigger = function (name, e) {\r\n            if (typeof name != 'string') throw new TypeError(Helper.PARAMETERS_TYPE_ERROR);\r\n            let event = eventList[name];\r\n            if (typeof event === 'undefined') throw new TypeError(EVENT_NAME_NOT_FOUND);\r\n            for (let fun of event) {\r\n                if (!fun(e))\r\n                    return;\r\n            }\r\n            return;\r\n        };\r\n    }\r\n}\r\nexport { Event }","const PARAMETERS_TYPE_ERROR = 'Parameters type error.';\r\n\r\n/**\r\n * 设置值\r\n * @alias Helper.setValue\r\n * @param {*} value - 值\r\n * @param {*} defaultValue - 默认值\r\n * @param {string} type - 类型\r\n * @returns {*} - 值\r\n */\r\nfunction setValue(value, defaultValue, type) {\r\n    let returnValue;\r\n    if (isEmpty(value)) returnValue = clone(defaultValue);\r\n    else returnValue = clone(value);\r\n    if (!isEmpty(type)) checkType(returnValue, type);\r\n    else if (!isEmpty(defaultValue)) checkType(returnValue, _typeof(defaultValue));\r\n    return returnValue;\r\n}\r\n\r\n/**\r\n * 设置多个值\r\n * @param {object} values - 值\r\n * @param {object} defaultValues - 默认值\r\n * @param {object} types - 类型\r\n * @returns {object} - 值\r\n */\r\nfunction setValues(values, defaultValues, types, clone = true) {\r\n    let returnValues = clone ? setValue(values, {}) : defaultValues;\r\n    let _values = clone ? returnValues : setValue(values, {});\r\n    for (let key in defaultValues) {\r\n        if (_typeof(defaultValues[key]) === 'object') \r\n            returnValues[key] = setValues(_values[key], defaultValues[key], types[key]);\r\n        else\r\n            returnValues[key] = setValue(_values[key], defaultValues[key], types[key]);\r\n    }\r\n    return returnValues;\r\n}\r\n\r\n/**\r\n * 检查类型\r\n * @alias Helper.checkType\r\n * @param {string} value - 值\r\n * @param {string} type - 类型\r\n * @param {boolean} canBeNull - 可以为空\r\n */\r\nfunction checkType(value, type, canBeNull = true) {\r\n    if (typeof type != 'string' && _typeof(type) != 'array') throw new TypeError(PARAMETERS_TYPE_ERROR);\r\n    if (canBeNull && isEmpty(value)) return;\r\n    if (_typeof(type) === 'array') {\r\n        let flat = false;\r\n        for (let item of type) {\r\n            if (typeof item != 'string') throw new TypeError(PARAMETERS_TYPE_ERROR);\r\n            if (_typeof(value) === item) flat = true;\r\n            break;\r\n        }\r\n        if (!flat) throw new TypeError(PARAMETERS_TYPE_ERROR);\r\n    } else if (_typeof(value) != type) throw new TypeError(PARAMETERS_TYPE_ERROR);\r\n}\r\n\r\n/**\r\n * 检查多个值\r\n * @param {object} values - 值\r\n * @param {object} types - 类型\r\n * @returns {object} - 值\r\n */\r\nfunction checkTypes(values, types, canBeNull = true) {\r\n    if (canBeNull && isEmpty(values)) return;\r\n    for (let key in types) {\r\n        if (_typeof(types[key]) === 'object') \r\n            checkTypes(values[key], types[key]);\r\n        else\r\n            checkType(values[key], types[key], canBeNull);\r\n    }\r\n}\r\n\r\n/**\r\n * 检查是否为空\r\n * @param {*} value - 值\r\n */\r\nfunction isEmpty(value) {\r\n    return typeof value === 'undefined' ||\r\n        (typeof value === 'number' && isNaN(value)) ||\r\n        value === null\r\n}\r\n\r\n/**\r\n * 获取对象的类型（可区分数组等）\r\n * @alias Helper._typeof\r\n * @param {*} object - 对象\r\n */\r\nfunction _typeof(object) {\r\n    //eg: [Object Function] -> Function -> function\r\n    return Object.prototype.toString.call(object).slice(8, -1).toLowerCase();\r\n}\r\n\r\n/**\r\n * 克隆对象\r\n * @param {*} object \r\n */\r\nfunction clone(object) {\r\n    let result, type = _typeof(object);\r\n    //确定result的类型\r\n    if (type === 'object') result = {};\r\n    else if (type === 'array') result = [];\r\n    else return object;\r\n    for (let key in object) {\r\n        result[key] = clone(object[key]); //递归调用\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * 帮助对象\r\n * @namespace\r\n */\r\nconst Helper = {\r\n    setValue: setValue,\r\n    setValues: setValues,\r\n    checkType: checkType,\r\n    checkTypes: checkTypes,\r\n    isEmpty: isEmpty,\r\n    _typeof: _typeof,\r\n    clone: clone,\r\n    PARAMETERS_TYPE_ERROR: PARAMETERS_TYPE_ERROR\r\n}\r\n\r\nexport { Helper }","/**\r\n * 双向链表类\r\n */\r\nclass LinkedList {\r\n    /**\r\n     * 创建一个双向链表。\r\n     */\r\n    constructor() {\r\n        /**\r\n         * 双向链表节点\r\n         * @private\r\n        */\r\n        class node {\r\n            constructor(element) {\r\n                this.element = element;\r\n                this.next = null;\r\n                this.previous = null;\r\n            }\r\n        }\r\n        //初始化\r\n        let topNode = new node(null);\r\n        let bottomNode = new node(null);\r\n        let length = 0;\r\n        topNode.next = bottomNode;\r\n        bottomNode.previous = topNode;\r\n        //公共函数\r\n        /**\r\n         * 获取元素个数\r\n         * @returns {number} 元素个数\r\n         */\r\n        this.getLength = l => length;\r\n        /**\r\n         * 插入元素\r\n         * @param {*} element - 元素\r\n         * @param {boolean} top - true: 插入到顶部 false: 插入到底部\r\n         */\r\n        this.push = function (element, top) {\r\n            let thisNode = new node(element);\r\n            if (top) {\r\n                thisNode.next = topNode.next;\r\n                thisNode.previous = topNode;\r\n                topNode.next = topNode.next.previous = thisNode;\r\n            }\r\n            else {\r\n                thisNode.previous = bottomNode.previous;\r\n                thisNode.next = bottomNode;\r\n                bottomNode.previous = bottomNode.previous.next = thisNode;\r\n            }\r\n            length++;\r\n        };\r\n        /**\r\n         * 读取元素\r\n         * @param {boolean} remove - 读取后是否删除\r\n         * @param {boolean} top - true: 读取顶部 false: 读取底部\r\n         * @returns {*} 元素\r\n         */\r\n        this.pop = function (remove, top) {\r\n            let thisNode;\r\n            if (top) {\r\n                thisNode = topNode.next;\r\n                if (topNode.next != bottomNode && remove) {\r\n                    thisNode.next.previous = topNode;\r\n                    topNode.next = thisNode.next;\r\n                }\r\n            }\r\n            else {\r\n                thisNode = bottomNode.previous;\r\n                if (bottomNode.previous != topNode && remove) {\r\n                    thisNode.previous.next = bottomNode;\r\n                    bottomNode.previous = thisNode.previous;\r\n                }\r\n            }\r\n            if (remove)\r\n                length--;\r\n            return thisNode.element;\r\n        };\r\n        /**\r\n         * 清空链表\r\n         */\r\n        this.clean = function () {\r\n            topNode = new node(null);\r\n            bottomNode = new node(null);\r\n            topNode.next = bottomNode;\r\n            bottomNode.previous = topNode;\r\n            length = 0;\r\n        };\r\n        /**\r\n         * 遍历链表\r\n         * @param {function} fun - 遍历回调函数\r\n         * 回调函数（参数：元素，返回：{remove：删除此元素，add:插入元素(add.addToUp:插入到上方, add.element:元素), stop：停止遍历}）\r\n         * @param {boolean} topToBottom - true: 从顶到底 false: 从底到顶\r\n         */\r\n        this.forEach = function (fun, topToBottom) {\r\n            let thisNode = topToBottom ? topNode : bottomNode;\r\n            while (topToBottom ?\r\n                (thisNode = thisNode.next) != bottomNode : (thisNode = thisNode.previous) != topNode) {\r\n                let _return = fun(thisNode.element);\r\n                if (_return) {\r\n                    if (_return.add) {\r\n                        let newNode = new node(_return.add.element);\r\n                        if (_return.add.addToUp) {\r\n                            newNode.previous = thisNode.previous;\r\n                            newNode.next = thisNode;\r\n                            thisNode.previous.next = newNode;\r\n                            thisNode.previous = newNode;\r\n                        }\r\n                        else {\r\n                            newNode.previous = thisNode;\r\n                            newNode.next = thisNode.next;\r\n                            thisNode.next.previous = newNode;\r\n                            thisNode.next = newNode;\r\n                        }\r\n                        length++;\r\n                    }\r\n                    if (_return.remove) {\r\n                        thisNode.previous.next = thisNode.next;\r\n                        thisNode.next.previous = thisNode.previous;\r\n                        length--;\r\n                    }\r\n                    if (_return.stop) {\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\r\nexport {LinkedList}","import { Helper } from '../helper'\r\n\r\n/**\r\n * 渲染器抽象类\r\n */\r\nclass BaseRenderer {\r\n    /**\r\n     * 实例化一个渲染器抽象类\r\n     * @param {object} element - Element 元素\r\n     * @param {openBSE~Options} options - 全局选项\r\n     * @param {object} elementSize - 元素大小\r\n     */\r\n    constructor(element, options, elementSize) {\r\n        if (new.target === BaseRenderer) {\r\n            throw new SyntaxError();\r\n        }\r\n\r\n        init(); //初始化\r\n\r\n        /**\r\n         * 隐藏弹幕\r\n         * @private @type {boolean}\r\n         */\r\n        let _hide = false;\r\n\r\n        /**\r\n         * 透明度\r\n         * @private @type {number}\r\n         */\r\n        let _opacity = 0.0;\r\n\r\n        /**\r\n         * 清除屏幕内容\r\n         * @abstract\r\n         */\r\n        this.cleanScreen = function () {\r\n            throw new SyntaxError();\r\n        }\r\n\r\n        /**\r\n         * 隐藏弹幕。\r\n         */\r\n        this.hide = function () {\r\n            _hide = true;\r\n            element.style.visibility = 'hidden';\r\n        }\r\n\r\n        /**\r\n         * 显示弹幕。\r\n         */\r\n        this.show = function () {\r\n            _hide = false;\r\n            element.style.visibility = 'visible';\r\n        }\r\n\r\n        /**\r\n         * 设置弹幕不透明度。\r\n         */\r\n        this.setOpacity = _setOpacity;\r\n\r\n        /**\r\n         * 设置弹幕不透明度。\r\n         */\r\n        function _setOpacity() {\r\n            if (options.opacity === 1) element.style.opacity = '';\r\n            else element.style.opacity = options.opacity;\r\n        }\r\n\r\n        /**\r\n         * 获取弹幕不透明度。\r\n         * @returns {number} 弹幕不透明度：取值范围 0.0 到 1.0，0.0 全透明；1.0 不透明。\r\n         */\r\n        this.getOpacity = () => _opacity;\r\n\r\n        /**\r\n         * 获取弹幕可见性。\r\n         * @returns {boolean} 指示弹幕是否可见。\r\n         * @description 获取弹幕可见性。\r\n         */\r\n        this.getVisibility = () => !_hide;\r\n\r\n        /**\r\n         * 绘制函数\r\n         * @abstract\r\n         */\r\n        this.draw = function () {\r\n            throw new SyntaxError();\r\n        }\r\n\r\n        /**\r\n         * 创建弹幕元素\r\n         * @abstract\r\n         * @param {object} bulletScreenOnScreen - 屏幕弹幕对象\r\n         */\r\n        this.creatAndgetWidth = function (bulletScreenOnScreen) {\r\n            throw new SyntaxError();\r\n        }\r\n\r\n        /**\r\n         * 删除弹幕元素\r\n         * @abstract\r\n         * @param {object} bulletScreenOnScreen - 屏幕弹幕对象\r\n         */\r\n        this.delete = function (bulletScreenOnScreen) {\r\n            throw new SyntaxError();\r\n        }\r\n\r\n        /**\r\n         * 检查弹幕是否被隐藏\r\n         * @param {object} bulletScreenOnScreen - 屏幕弹幕对象\r\n         */\r\n        this.checkWhetherHide = (bulletScreenOnScreen) => (bulletScreenOnScreen.bulletScreen.type & options.hiddenTypes) === bulletScreenOnScreen.bulletScreen.type;\r\n\r\n        /**\r\n        * 设置尺寸\r\n        * @function\r\n        */\r\n        this.setSize = setSize;\r\n\r\n        /**\r\n         * 设置尺寸\r\n         * @private\r\n         */\r\n        function setSize() {\r\n            element.style.width = `${elementSize.width}px`;\r\n            element.style.height = `${elementSize.height}px`;\r\n            if (options.scaling != 1) {\r\n                element.style.transform =\r\n                    element.style.webkitTransform =\r\n                    element.style.msTransform = `scale(${options.scaling},${options.scaling})`;\r\n                element.style.transformOrigin =\r\n                    element.style.webkitTransformOrigin =\r\n                    element.style.msTransformOrigin = `left top`;\r\n            } else {\r\n                element.style.transform =\r\n                    element.style.webkitTransform =\r\n                    element.style.msTransform =\r\n                    element.style.transformOrigin =\r\n                    element.style.webkitTransformOrigin =\r\n                    element.style.msTransformOrigin = '';\r\n            }\r\n        }\r\n\r\n        /**\r\n         * 初始化\r\n         * @private\r\n         */\r\n        function init() {\r\n            setSize();\r\n            _setOpacity();\r\n            element.style.position = 'relative';\r\n        }\r\n    }\r\n}\r\n\r\nexport { BaseRenderer };","import { BaseRenderer } from './baseRenderer'\r\nimport { Helper } from '../helper'\r\n\r\n/**\r\n * Canvas 渲染器抽象类\r\n */\r\nclass CanvasBaseRenderer extends BaseRenderer {\r\n    /**\r\n     * 实例化一个 Canvas 渲染器抽象类\r\n     * @param {object} element - Element 元素\r\n     * @param {openBSE~Options} options - 全局选项\r\n     * @param {object} elementSize - 元素大小\r\n     * @param {Event} event - 事件对象\r\n     * @param {object} bulletScreensOnScreen - 屏幕弹幕列表对象\r\n     */\r\n    constructor(element, options, elementSize, event, bulletScreensOnScreen) {\r\n        if (new.target === CanvasBaseRenderer) {\r\n            throw new SyntaxError();\r\n        }\r\n\r\n        /**\r\n         * DPI 缩放比例（倍数）\r\n         * @private @type {number}\r\n         */\r\n        let _devicePixelRatio = typeof window.devicePixelRatio === 'undefined' ? 1 : window.devicePixelRatio;\r\n        _devicePixelRatio *= options.scaling;\r\n        /**\r\n         * 画布元素\r\n         * @private @type {Element}\r\n         */\r\n        let _canvas = init();\r\n        super(_canvas, options, elementSize);\r\n\r\n        /**\r\n         * 创建弹幕元素\r\n         * @override\r\n         * @param {object} bulletScreenOnScreen - 屏幕弹幕对象\r\n         */\r\n        this.creatAndgetWidth = function (bulletScreenOnScreen) {\r\n            let bulletScreen = bulletScreenOnScreen.bulletScreen;\r\n            let hideCanvas = document.createElement('canvas');\r\n            let hideCanvasContext = hideCanvas.getContext('2d');\r\n\r\n            hideCanvasContext.font = `${bulletScreen.style.fontWeight} ${bulletScreenOnScreen.size}px ${bulletScreen.style.fontFamily}`;\r\n            bulletScreenOnScreen.width = hideCanvasContext.measureText(bulletScreen.text).width; //弹幕的宽度：像素\r\n\r\n            hideCanvas.width = (bulletScreenOnScreen.width + 8) * _devicePixelRatio;\r\n            hideCanvas.height = (bulletScreenOnScreen.height + 8) * _devicePixelRatio;\r\n\r\n            hideCanvasContext.shadowColor = 'black';\r\n            hideCanvasContext.font = `${bulletScreen.style.fontWeight} ${bulletScreenOnScreen.size * _devicePixelRatio}px ${bulletScreen.style.fontFamily}`;\r\n            let textX = 4 * _devicePixelRatio;\r\n            let textY = (4 + bulletScreenOnScreen.size * 0.8) * _devicePixelRatio;\r\n            if (bulletScreen.style.color != null) {\r\n                hideCanvasContext.shadowBlur = (bulletScreen.style.shadowBlur + 0.5) * _devicePixelRatio;\r\n                hideCanvasContext.fillStyle = bulletScreen.style.color;\r\n                hideCanvasContext.fillText(bulletScreen.text, textX, textY);\r\n            }\r\n            if (bulletScreen.style.borderColor != null) {\r\n                hideCanvasContext.shadowBlur = 0;\r\n                hideCanvasContext.lineWidth = 0.5 * _devicePixelRatio;\r\n                hideCanvasContext.strokeStyle = bulletScreen.style.borderColor;\r\n                hideCanvasContext.strokeText(bulletScreen.text, textX, textY);\r\n            }\r\n            if (bulletScreen.style.boxColor != null) {\r\n                hideCanvasContext.shadowBlur = 0;\r\n                hideCanvasContext.lineWidth = _devicePixelRatio;\r\n                hideCanvasContext.strokeStyle = bulletScreen.style.boxColor;\r\n                hideCanvasContext.strokeRect(_devicePixelRatio, _devicePixelRatio, hideCanvas.width - _devicePixelRatio, hideCanvas.height - _devicePixelRatio);\r\n            }\r\n            bulletScreenOnScreen.hideCanvas = hideCanvas;\r\n        }\r\n\r\n        /**\r\n         * 删除弹幕元素\r\n         * @override\r\n         * @param {object} bulletScreenOnScreen - 屏幕弹幕对象\r\n         */\r\n        this.delete = function (bulletScreenOnScreen) {\r\n\r\n        }\r\n\r\n        let _setSize = this.setSize;\r\n        /**\r\n         * 设置尺寸\r\n         * @override\r\n         */\r\n        this.setSize = function () {\r\n            _setSize();\r\n            _devicePixelRatio = typeof window.devicePixelRatio === 'undefined' ? 1 : window.devicePixelRatio;\r\n            _devicePixelRatio *= options.scaling;\r\n            _canvas.width = elementSize.width * _devicePixelRatio;\r\n            _canvas.height = elementSize.height * _devicePixelRatio;\r\n        }\r\n\r\n        /**\r\n         * 获取缩放比例\r\n         * @returns {number} 缩放比例\r\n         */\r\n        this.getDevicePixelRatio = () => _devicePixelRatio;\r\n\r\n        /**\r\n         * 获取画布对象\r\n         * @returns {Element} 画布对象\r\n         */\r\n        this.getCanvas = () => _canvas;\r\n\r\n        /**\r\n         * 添加Canvas\r\n         * @private\r\n         * @returns {Element} 画布对象\r\n         */\r\n        function init() {\r\n            let canvas = document.createElement('canvas'); //canvas对象\r\n            element.innerHTML = '';\r\n            element.appendChild(canvas);\r\n            canvas.width = elementSize.width * _devicePixelRatio;\r\n            canvas.height = elementSize.height * _devicePixelRatio;\r\n            registerEvent(canvas); //注册事件响应程序\r\n            return canvas;\r\n        }\r\n\r\n        let _checkWhetherHide = this.checkWhetherHide;\r\n        /**\r\n         * 注册事件响应程序\r\n         * @private\r\n         * @param {Element} element - 元素\r\n         */\r\n        function registerEvent(element) {\r\n            function getBulletScreenOnScreenByLocation(location) {\r\n                let bulletScreen = null;\r\n                bulletScreensOnScreen.forEach(function (bulletScreenOnScreen) {\r\n                    if (_checkWhetherHide(bulletScreenOnScreen)) return null;\r\n                    let x1 = bulletScreenOnScreen.x - 4;\r\n                    let x2 = x1 + bulletScreenOnScreen.width + 8;\r\n                    let y1 = bulletScreenOnScreen.actualY - 4;\r\n                    let y2 = y1 + bulletScreenOnScreen.height + 8;\r\n                    if (location.x >= x1 && location.x <= x2 && location.y >= y1 && location.y <= y2) {\r\n                        bulletScreen = Helper.clone(bulletScreenOnScreen.bulletScreen);\r\n                        return { stop: true };\r\n                    }\r\n                }, false);\r\n                return bulletScreen;\r\n            }\r\n            function getLocation(e) {\r\n                function getOffsetTop(element) {\r\n                    let offsetTop = 0;\r\n                    do {\r\n                        offsetTop += element.offsetTop;\r\n                    } while ((element = element.offsetParent) != null);\r\n                    return offsetTop;\r\n                }\r\n                function getOffsetLeft(element) {\r\n                    let offsetLeft = 0;\r\n                    do {\r\n                        offsetLeft += element.offsetLeft;\r\n                    } while ((element = element.offsetParent) != null);\r\n                    return offsetLeft;\r\n                }\r\n                if (typeof e.offsetX === 'undefined' || e.offsetX === null) {\r\n                    if (typeof e.layerX === 'undefined' || e.layerX === null) {\r\n                        if (typeof e.pageX === 'undefined' || e.pageX === null) {\r\n                            let doc = document.documentElement, body = document.body;\r\n                            e.pageX = e.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);\r\n                            e.pageY = e.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);\r\n                        }\r\n                        e.layerX = e.pageX - getOffsetLeft(e.target);\r\n                        e.layerY = e.pageY - getOffsetTop(e.target);\r\n                    }\r\n                    e.offsetX = e.layerX - e.target.clientLeft;\r\n                    e.offsetY = e.layerY - e.target.clientTop;\r\n                }\r\n                return {\r\n                    x: e.offsetX,\r\n                    y: e.offsetY\r\n                };\r\n            }\r\n\r\n            //上下文菜单\r\n            element.oncontextmenu = function (e) {\r\n                let bulletScreen = getBulletScreenOnScreenByLocation(getLocation(e));\r\n                if (bulletScreen)\r\n                    event.trigger('contextmenu', {\r\n                        bulletScreen: bulletScreen\r\n                    });\r\n                return false;\r\n            };\r\n            //单击\r\n            element.onclick = function (e) {\r\n                let bulletScreen = getBulletScreenOnScreenByLocation(getLocation(e));\r\n                if (bulletScreen)\r\n                    event.trigger('click', {\r\n                        bulletScreen: bulletScreen\r\n                    });\r\n                return false;\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nexport { CanvasBaseRenderer };","import { CanvasBaseRenderer } from './canvasBaseRenderer'\r\nimport { BrowserNotSupportError } from '../../browserNotSupportError'\r\n\r\n/**\r\n * Canvas 渲染器类\r\n */\r\nclass CanvasRenderer extends CanvasBaseRenderer {\r\n    /**\r\n     * 实例化一个 Canvas 渲染器类\r\n     * @param {object} element - Element 元素\r\n     * @param {openBSE~Options} options - 全局选项\r\n     * @param {object} elementSize - 元素大小\r\n     * @param {Event} event - 事件对象\r\n     * @param {object} bulletScreensOnScreen - 屏幕弹幕列表对象\r\n     * @throws {openBSE.BrowserNotSupportError} 浏览器不支持特定渲染模式时引发错误\r\n     */\r\n    constructor(element, options, elementSize, event, bulletScreensOnScreen) {\r\n        supportCheck(); //浏览器支持检测\r\n        super(element, options, elementSize, event, bulletScreensOnScreen);\r\n\r\n        /**\r\n         * 清除屏幕内容\r\n         * @override\r\n         */\r\n        this.cleanScreen = function () {\r\n            let canvas = this.getCanvas();\r\n            canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);\r\n        }\r\n\r\n        /**\r\n         * 绘制函数\r\n         * @override\r\n         */\r\n        this.draw = function () {\r\n            let canvas = this.getCanvas();\r\n            let devicePixelRatio = this.getDevicePixelRatio();\r\n            //离屏渲染\r\n            let hideCanvas = document.createElement('canvas');\r\n            hideCanvas.width = canvas.width;\r\n            hideCanvas.height = canvas.height;\r\n            let hideCanvasContext = hideCanvas.getContext('2d');\r\n            bulletScreensOnScreen.forEach((bulletScreenOnScreen) => {\r\n                if (this.checkWhetherHide(bulletScreenOnScreen)) return;\r\n                hideCanvasContext.drawImage(bulletScreenOnScreen.hideCanvas, (bulletScreenOnScreen.x - 4) * devicePixelRatio, (bulletScreenOnScreen.actualY - 4) * devicePixelRatio, (bulletScreenOnScreen.width + 8) * devicePixelRatio, (bulletScreenOnScreen.height + 8) * devicePixelRatio);\r\n            }, true);\r\n            let canvasContext = canvas.getContext('2d');\r\n            canvasContext.clearRect(0, 0, canvas.width, canvas.height);\r\n            canvasContext.drawImage(hideCanvas, 0, 0);\r\n        }\r\n\r\n        /**\r\n         * 浏览器支持检测\r\n         * @private\r\n         * @throws {openBSE.BrowserNotSupportError} 浏览器不支持特定渲染模式时引发错误\r\n         */\r\n        function supportCheck() {\r\n            let canvas = document.createElement('canvas'); //canvas对象\r\n            if (typeof canvas.getContext != 'function') throw new BrowserNotSupportError('Canvas');\r\n            let context = canvas.getContext('2d');\r\n            if (context === null) throw new BrowserNotSupportError('Canvas 2D');\r\n            if (typeof context.fillText != 'function') throw new BrowserNotSupportError('Canvas 2D fillText Function');\r\n        }\r\n    }\r\n}\r\n\r\nexport { CanvasRenderer };","import { BaseRenderer } from './baseRenderer'\r\nimport { BrowserNotSupportError } from '../../browserNotSupportError'\r\nimport { Helper } from '../helper'\r\n\r\n/**\r\n * CSS3 渲染器类\r\n */\r\nclass CSS3Renderer extends BaseRenderer {\r\n    /**\r\n     * 实例化一个 CSS3 渲染器类\r\n     * @param {object} element - Element 元素\r\n     * @param {openBSE~Options} options - 全局选项\r\n     * @param {object} elementSize - 元素大小\r\n     * @param {Event} event - 事件对象\r\n     * @param {object} bulletScreensOnScreen - 屏幕弹幕列表对象\r\n     * @throws {openBSE.BrowserNotSupportError} 浏览器不支持特定渲染模式时引发错误\r\n     */\r\n    constructor(element, options, elementSize, event, bulletScreensOnScreen) {\r\n        supportCheck(); //浏览器支持检测\r\n        let _div = init();\r\n        super(_div, options, elementSize);\r\n\r\n        /**\r\n         * 清除屏幕内容\r\n         * @override\r\n         */\r\n        this.cleanScreen = function () {\r\n            _div.innerHTML = '';\r\n        }\r\n\r\n        /**\r\n         * 绘制函数\r\n         * @override\r\n         */\r\n        this.draw = function () {\r\n            bulletScreensOnScreen.forEach((bulletScreenOnScreen) => {\r\n                if (this.checkWhetherHide(bulletScreenOnScreen)) {\r\n                    bulletScreenOnScreen.div.style.visibility = 'hidden';\r\n                    return;\r\n                }\r\n                bulletScreenOnScreen.div.style.visibility = 'visible';\r\n                bulletScreenOnScreen.div.style.transform =\r\n                    bulletScreenOnScreen.div.style.webkitTransform =\r\n                    bulletScreenOnScreen.div.style.msTransform =\r\n                    `translate(${(bulletScreenOnScreen.x - 4)}px,${(bulletScreenOnScreen.actualY - 4)}px)`;\r\n            }, true);\r\n        }\r\n\r\n        /**\r\n         * 创建弹幕元素\r\n         * @override\r\n         * @param {object} bulletScreenOnScreen - 屏幕弹幕对象\r\n         */\r\n        this.creatAndgetWidth = function (bulletScreenOnScreen) {\r\n            let bulletScreen = bulletScreenOnScreen.bulletScreen;\r\n            let bulletScreenDiv = document.createElement('div');\r\n            bulletScreenDiv.style.position = 'absolute';\r\n            bulletScreenDiv.style.whiteSpace = 'nowrap';\r\n            bulletScreenDiv.style.fontWeight = bulletScreen.style.fontWeight;\r\n            bulletScreenDiv.style.fontSize = `${bulletScreenOnScreen.size}px`;\r\n            bulletScreenDiv.style.fontFamily = bulletScreen.style.fontFamily;\r\n            bulletScreenDiv.style.lineHeight = `${bulletScreenOnScreen.size}px`;\r\n            bulletScreenDiv.style.color = bulletScreen.style.color;\r\n            if (bulletScreen.style.shadowBlur != null)\r\n                bulletScreenDiv.style.textShadow = `0 0 ${bulletScreen.style.shadowBlur}px black`;\r\n            if (bulletScreen.style.borderColor != null) {\r\n                bulletScreenDiv.style.textStroke = bulletScreenDiv.style.webkitTextStroke = '0.5px';\r\n                bulletScreenDiv.style.textStrokeColor = bulletScreenDiv.style.webkitTextStrokeColor = bulletScreen.borderColor;\r\n            }\r\n            if (bulletScreen.style.boxColor != null) {\r\n                bulletScreenDiv.style.padding = '3px';\r\n                bulletScreenDiv.style.border = '1px solid';\r\n                bulletScreenDiv.style.borderColor = bulletScreen.style.boxColor;\r\n            }\r\n            else {\r\n                bulletScreenDiv.style.padding = '4px';\r\n            }\r\n            bulletScreenDiv.appendChild(document.createTextNode(bulletScreen.text));\r\n            bulletScreenDiv.bulletScreen = bulletScreen;\r\n            _div.appendChild(bulletScreenDiv);\r\n            bulletScreenOnScreen.width = bulletScreenDiv.clientWidth - 8; //弹幕的宽度：像素\r\n            bulletScreenOnScreen.div = bulletScreenDiv;\r\n        }\r\n\r\n        /**\r\n        * 删除弹幕元素\r\n        * @override\r\n        * @param {object} bulletScreenOnScreen - 屏幕弹幕对象\r\n        */\r\n        this.delete = function (bulletScreenOnScreen) {\r\n            _div.removeChild(bulletScreenOnScreen.div);\r\n        }\r\n\r\n        /**\r\n         * 添加Div\r\n         * @private\r\n         * @returns {Element} Div\r\n         */\r\n        function init() {\r\n            let div = document.createElement('div'); //DIV\r\n            element.innerHTML = '';\r\n            element.appendChild(div);\r\n            div.style.overflow = 'hidden';\r\n            div.style.padding = '0';\r\n            div.style.margin = '0';\r\n            div.style.userSelect =\r\n                div.style.webkitUserSelect =\r\n                div.style.msUserSelect = 'none';\r\n            div.style.cursor = 'default';\r\n            registerEvent(div); //注册事件响应程序\r\n            return div;\r\n        }\r\n\r\n        /**\r\n         * 浏览器支持检测\r\n         * @private\r\n         * @throws {openBSE.BrowserNotSupportError} 浏览器不支持特定渲染模式时引发错误\r\n         */\r\n        function supportCheck() {\r\n            let style = document.createElement('div').style;\r\n            if (\r\n                typeof style.transform === 'undefined' &&\r\n                typeof style.msTransform === 'undefined' &&\r\n                typeof style.webkitTransform === 'undefined'\r\n            ) throw new BrowserNotSupportError('CSS3 transform');\r\n        }\r\n\r\n        /**\r\n         * 注册事件响应程序\r\n         * @private\r\n         * @param {Element} element - 元素\r\n         */\r\n        function registerEvent(element) {\r\n            //上下文菜单\r\n            element.oncontextmenu = function (e) {\r\n                if (e.target != this)\r\n                    event.trigger('contextmenu', {\r\n                        bulletScreen: Helper.clone(e.target.bulletScreen)\r\n                    });\r\n                return false;\r\n            };\r\n            //单击\r\n            element.onclick = function (e) {\r\n                if (e.target != this)\r\n                    event.trigger('click', {\r\n                        bulletScreen: Helper.clone(e.target.bulletScreen)\r\n                    });\r\n                return false;\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nexport { CSS3Renderer };","import { BaseRenderer } from './baseRenderer';\r\n\r\n/**\r\n * 渲染器\r\n * @private @constant\r\n */\r\nconst RENDERERS = {\r\n    /**\r\n     * CSS3 渲染模式\r\n     * @private @readonly\r\n     */\r\n    css3: require('./css3Renderer').CSS3Renderer,\r\n    /**\r\n     * SVG 渲染模式\r\n     * @private @readonly\r\n     */\r\n    svg: require('./svgRenderer').SVGRenderer,\r\n    /**\r\n     * WebGL 渲染模式\r\n     * @private @readonly\r\n     */\r\n    webgl: require('./webglRenderer').WebGLRenderer,\r\n    /**\r\n     * Canvas 2D 渲染模式\r\n     * @private @readonly\r\n     */\r\n    canvas: require('./canvasRenderer').CanvasRenderer\r\n}\r\n\r\n/**\r\n * 渲染器工厂\r\n */\r\nclass RenderersFactory {\r\n    /**\r\n     * 实例化一个渲染器工厂\r\n     * @param {object} element - Element 元素\r\n     * @param {openBSE~Options} options - 全局选项\r\n     * @param {object} elementSize - 元素大小\r\n     * @param {Event} event - 事件对象\r\n     * @param {object} bulletScreensOnScreen - 屏幕弹幕列表对象\r\n     */\r\n    constructor(element, options, elementSize, event, bulletScreensOnScreen) {\r\n        /**\r\n         * 获取渲染器\r\n         * @param {string} renderMode - 渲染模式\r\n         * @returns {BaseRenderer} 渲染器的实例\r\n         * @throws {openBSE.BrowserNotSupportError} 浏览器不支持特定渲染模式时引发错误\r\n         * @throws {TypeError} 传入的参数错误时引发错误。请参阅 MDN [TypeError]{@link https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError} 。\r\n         */\r\n        this.getRenderer = function (renderMode) {\r\n            let renderer = RENDERERS[renderMode];\r\n            if (typeof(renderer) === 'undefined') throw new TypeError(`The render mode \"${renderMode}\" is undefined.`);\r\n            return new renderer(element, options, elementSize, event, bulletScreensOnScreen);\r\n        }\r\n    }\r\n}\r\n\r\nexport { RenderersFactory };","import { BaseRenderer } from './baseRenderer'\r\nimport { BrowserNotSupportError } from '../../browserNotSupportError'\r\nimport { Helper } from '../helper'\r\n\r\n/**\r\n * SVG 渲染器类\r\n */\r\nclass SVGRenderer extends BaseRenderer {\r\n    /**\r\n     * 实例化一个 SVG 渲染器类\r\n     * @param {object} element - Element 元素\r\n     * @param {openBSE~Options} options - 全局选项\r\n     * @param {object} elementSize - 元素大小\r\n     * @param {Event} event - 事件对象\r\n     * @param {object} bulletScreensOnScreen - 屏幕弹幕列表对象\r\n     * @throws {openBSE.BrowserNotSupportError} 浏览器不支持特定渲染模式时引发错误\r\n     */\r\n    constructor(element, options, elementSize, event, bulletScreensOnScreen) {\r\n        supportCheck(); //浏览器支持检测\r\n        let _div = init();\r\n        let _svg;\r\n        let _defsSvg;\r\n        super(_div, options, elementSize);\r\n\r\n        /**\r\n         * 清除屏幕内容\r\n         * @override\r\n         */\r\n        this.cleanScreen = function () {\r\n            _svg.innerHTML = '';\r\n            _defsSvg = createElementSVG('defs'); //defs\r\n            _svg.appendChild(_defsSvg);\r\n        }\r\n\r\n        /**\r\n         * 绘制函数\r\n         * @override\r\n         */\r\n        this.draw = function () {\r\n            bulletScreensOnScreen.forEach((bulletScreenOnScreen) => {\r\n                for (let index in bulletScreenOnScreen.svg) {\r\n                    let item = bulletScreenOnScreen.svg[index];\r\n                    if (this.checkWhetherHide(bulletScreenOnScreen)) item.setAttribute('opacity', '0');\r\n                    else item.setAttribute('opacity', '1');\r\n                    item.setAttribute('transform', `translate(${(bulletScreenOnScreen.x - 4)},${(bulletScreenOnScreen.actualY - 4)})`);\r\n                }\r\n            }, true);\r\n        }\r\n\r\n        /**\r\n         * 创建弹幕元素\r\n         * @override\r\n         * @param {object} bulletScreenOnScreen - 屏幕弹幕对象\r\n         */\r\n        this.creatAndgetWidth = function (bulletScreenOnScreen) {\r\n            let bulletScreen = bulletScreenOnScreen.bulletScreen;\r\n            bulletScreenOnScreen.svg = {};\r\n\r\n            let textSvg = createElementSVG('text');\r\n            textSvg.setAttribute('x', 0);\r\n            textSvg.setAttribute('y', bulletScreenOnScreen.size * 0.8);\r\n            textSvg.setAttribute('font-family', bulletScreen.style.fontFamily);\r\n            textSvg.setAttribute('font-size', bulletScreenOnScreen.size);\r\n            textSvg.setAttribute('font-weight', bulletScreen.style.fontWeight);\r\n            textSvg.setAttribute('fill', bulletScreen.style.color);\r\n            textSvg.appendChild(document.createTextNode(bulletScreen.text));\r\n            if (bulletScreen.style.borderColor != null) {\r\n                textSvg.setAttribute('stroke', bulletScreen.borderColor);\r\n                textSvg.setAttribute('stroke-width', 0.5);\r\n            }\r\n\r\n            if (bulletScreen.style.shadowBlur != null) {\r\n                let filterId = `bulletScreenEngine_svgFilter_shadow_${bulletScreen.style.shadowBlur}`;\r\n                let filterSvg = document.getElementById(filterId);\r\n                if (filterSvg === null) {\r\n                    filterSvg = createElementSVG('filter');\r\n                    filterSvg.id = filterId;\r\n                    filterSvg.setAttribute('x', '-100%');\r\n                    filterSvg.setAttribute('y', '-100%');\r\n                    filterSvg.setAttribute('width', '300%');\r\n                    filterSvg.setAttribute('height', '300%');\r\n                    let feOffsetSvg = createElementSVG('feOffset');\r\n                    feOffsetSvg.setAttribute('result', 'offOut');\r\n                    feOffsetSvg.setAttribute('in', 'SourceAlpha');\r\n                    filterSvg.appendChild(feOffsetSvg);\r\n                    let feGaussianBlurSvg = createElementSVG('feGaussianBlur');\r\n                    feGaussianBlurSvg.setAttribute('result', 'blurOut');\r\n                    feGaussianBlurSvg.setAttribute('in', 'offOut');\r\n                    feGaussianBlurSvg.setAttribute('stdDeviation', bulletScreen.style.shadowBlur);\r\n                    filterSvg.appendChild(feGaussianBlurSvg);\r\n                    let feBlendSvg = createElementSVG('feBlend');\r\n                    feBlendSvg.setAttribute('in', 'SourceGraphic');\r\n                    feBlendSvg.setAttribute('in2', 'blurOut');\r\n                    feBlendSvg.setAttribute('mode', 'normal');\r\n                    filterSvg.appendChild(feBlendSvg);\r\n                    filterSvg.bulletScreenCount = 0;\r\n                    _defsSvg.appendChild(filterSvg);\r\n                }\r\n                filterSvg.bulletScreenCount++;\r\n                textSvg.setAttribute('filter', `url(#${filterId})`);\r\n                bulletScreenOnScreen.filterId = filterId;\r\n            }\r\n\r\n            _svg.appendChild(textSvg);\r\n            bulletScreenOnScreen.svg.text = textSvg;\r\n            bulletScreenOnScreen.width = textSvg.getComputedTextLength(); //弹幕的宽度：像素\r\n\r\n            if (bulletScreen.style.boxColor != null) {\r\n                let rectSvg = createElementSVG('rect');\r\n                rectSvg.setAttribute('x', -3);\r\n                rectSvg.setAttribute('y', -3);\r\n                rectSvg.setAttribute('fill', 'none');\r\n                rectSvg.setAttribute('height', bulletScreenOnScreen.height + 7);\r\n                rectSvg.setAttribute('width', bulletScreenOnScreen.width + 7);\r\n                rectSvg.setAttribute('stroke', bulletScreen.style.boxColor);\r\n                rectSvg.setAttribute('stroke-width', 1);\r\n                _svg.appendChild(rectSvg);\r\n                bulletScreenOnScreen.svg.rect = rectSvg;\r\n            }\r\n        }\r\n\r\n        /**\r\n        * 删除弹幕元素\r\n        * @override\r\n        * @param {object} bulletScreenOnScreen - 屏幕弹幕对象\r\n        */\r\n        this.delete = function (bulletScreenOnScreen) {\r\n            if (typeof bulletScreenOnScreen.filterId != 'undefined') {\r\n                let filterSvg = document.getElementById(bulletScreenOnScreen.filterId);\r\n                if (filterSvg != null && --filterSvg.bulletScreenCount === 0)\r\n                    _defsSvg.removeChild(filterSvg);\r\n            }\r\n            for (let index in bulletScreenOnScreen.svg) {\r\n                _svg.removeChild(bulletScreenOnScreen.svg[index]);\r\n            }\r\n        }\r\n\r\n        let _setSize = this.setSize;\r\n        /**\r\n         * 设置尺寸\r\n         * @override\r\n         */\r\n        this.setSize = function () {\r\n            _setSize();\r\n            _svg.setAttribute('height', elementSize.height);\r\n            _svg.setAttribute('width', elementSize.width);\r\n        }\r\n\r\n        /**\r\n         * 添加Div\r\n         * @private\r\n         * @returns {Element} Div\r\n         */\r\n        function init() {\r\n            let div = document.createElement('div'); //DIV\r\n            element.innerHTML = '';\r\n            element.appendChild(div);\r\n            div.style.padding = '0';\r\n            div.style.margin = '0';\r\n            _svg = createElementSVG('svg'); //SVG\r\n            _defsSvg = createElementSVG('defs'); //defs\r\n            _svg.appendChild(_defsSvg);\r\n            _svg.setAttribute('height', elementSize.height);\r\n            _svg.setAttribute('width', elementSize.width);\r\n            div.appendChild(_svg);\r\n            let eventDiv = document.createElement('div'); //DIV\r\n            eventDiv.style.position = 'absolute';\r\n            eventDiv.style.top =\r\n                eventDiv.style.right =\r\n                eventDiv.style.bottom =\r\n                eventDiv.style.left = '0';\r\n            div.appendChild(eventDiv);\r\n            registerEvent(eventDiv); //注册事件响应程序\r\n            return div;\r\n        }\r\n\r\n        /**\r\n         * 浏览器支持检测\r\n         * @private\r\n         * @throws {openBSE.BrowserNotSupportError} 浏览器不支持特定渲染模式时引发错误\r\n         */\r\n        function supportCheck() {\r\n            if (typeof document.createElementNS != 'function') throw new BrowserNotSupportError('createElementNS Function');\r\n            if (typeof createElementSVG('svg').createSVGRect != 'function') throw new BrowserNotSupportError('SVG');\r\n        }\r\n\r\n        let _checkWhetherHide = this.checkWhetherHide;\r\n        /**\r\n         * 注册事件响应程序\r\n         * @private\r\n         * @param {Element} element - 元素\r\n         */\r\n        function registerEvent(element) {\r\n            function getBulletScreenOnScreenByLocation(location) {\r\n                let bulletScreen = null;\r\n                bulletScreensOnScreen.forEach(function (bulletScreenOnScreen) {\r\n                    if (_checkWhetherHide(bulletScreenOnScreen)) return null;\r\n                    let x1 = bulletScreenOnScreen.x - 4;\r\n                    let x2 = x1 + bulletScreenOnScreen.width + 8;\r\n                    let y1 = bulletScreenOnScreen.actualY - 4;\r\n                    let y2 = y1 + bulletScreenOnScreen.height + 8;\r\n                    if (location.x >= x1 && location.x <= x2 && location.y >= y1 && location.y <= y2) {\r\n                        bulletScreen = Helper.clone(bulletScreenOnScreen.bulletScreen);\r\n                        return { stop: true };\r\n                    }\r\n                }, false);\r\n                return bulletScreen;\r\n            }\r\n            function getLocation(e) {\r\n                function getOffsetTop(element) {\r\n                    let offsetTop = 0;\r\n                    do {\r\n                        offsetTop += element.offsetTop;\r\n                    } while ((element = element.offsetParent) != null);\r\n                    return offsetTop;\r\n                }\r\n                function getOffsetLeft(element) {\r\n                    let offsetLeft = 0;\r\n                    do {\r\n                        offsetLeft += element.offsetLeft;\r\n                    } while ((element = element.offsetParent) != null);\r\n                    return offsetLeft;\r\n                }\r\n                if (typeof e.offsetX === 'undefined' || e.offsetX === null) {\r\n                    if (typeof e.layerX === 'undefined' || e.layerX === null) {\r\n                        if (typeof e.pageX === 'undefined' || e.pageX === null) {\r\n                            let doc = document.documentElement, body = document.body;\r\n                            e.pageX = e.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);\r\n                            e.pageY = e.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);\r\n                        }\r\n                        e.layerX = e.pageX - getOffsetLeft(e.target);\r\n                        e.layerY = e.pageY - getOffsetTop(e.target);\r\n                    }\r\n                    e.offsetX = e.layerX - e.target.clientLeft;\r\n                    e.offsetY = e.layerY - e.target.clientTop;\r\n                }\r\n                return {\r\n                    x: e.offsetX,\r\n                    y: e.offsetY\r\n                };\r\n            }\r\n\r\n            //上下文菜单\r\n            element.oncontextmenu = function (e) {\r\n                let bulletScreen = getBulletScreenOnScreenByLocation(getLocation(e));\r\n                if (bulletScreen)\r\n                    event.trigger('contextmenu', {\r\n                        bulletScreen: bulletScreen\r\n                    });\r\n                return false;\r\n            };\r\n            //单击\r\n            element.onclick = function (e) {\r\n                let bulletScreen = getBulletScreenOnScreenByLocation(getLocation(e));\r\n                if (bulletScreen)\r\n                    event.trigger('click', {\r\n                        bulletScreen: bulletScreen\r\n                    });\r\n                return false;\r\n            };\r\n        }\r\n\r\n        /**\r\n         * 创建 SVG 元素\r\n         * @private\r\n         * @param {string} qualifiedName - Element 名称\r\n         * @param {object} options - 选项\r\n         */\r\n        function createElementSVG(qualifiedName, options) {\r\n            return document.createElementNS('http://www.w3.org/2000/svg', qualifiedName, options);\r\n        }\r\n    }\r\n}\r\n\r\nexport { SVGRenderer };","import { CanvasBaseRenderer } from './canvasBaseRenderer'\r\nimport { BrowserNotSupportError } from '../../browserNotSupportError'\r\n\r\n/**\r\n * WebGL 渲染器类\r\n */\r\nclass WebGLRenderer extends CanvasBaseRenderer {\r\n    /**\r\n     * 实例化一个 WebGL 渲染器类\r\n     * @param {object} element - Element 元素\r\n     * @param {openBSE~Options} options - 全局选项\r\n     * @param {object} elementSize - 元素大小\r\n     * @param {Event} event - 事件对象\r\n     * @param {object} bulletScreensOnScreen - 屏幕弹幕列表对象\r\n     * @throws {openBSE.BrowserNotSupportError} 浏览器不支持特定渲染模式时引发错误\r\n     */\r\n    constructor(element, options, elementSize, event, bulletScreensOnScreen) {\r\n        supportCheck(); //浏览器支持检测\r\n        super(element, options, elementSize, event, bulletScreensOnScreen);\r\n        /**\r\n         * WebGL 上下文对象\r\n         * @private @type {object}\r\n         */\r\n        let _webglContext;\r\n        let _positionAttributeLocation;\r\n        let _resolutionUniformLocation;\r\n        /**\r\n         * Canvas 元素\r\n         * @private @type {object}\r\n         */\r\n        let _canvas = this.getCanvas();\r\n        init();\r\n\r\n        /**\r\n         * 清除屏幕内容\r\n         * @override\r\n         */\r\n        this.cleanScreen = function () {\r\n            _webglContext.clear(_webglContext.COLOR_BUFFER_BIT);\r\n        }\r\n\r\n        /**\r\n         * 绘制函数\r\n         * @override\r\n         */\r\n        this.draw = function () {\r\n            let devicePixelRatio = this.getDevicePixelRatio();\r\n            // 清空画布\r\n            _webglContext.clear(_webglContext.COLOR_BUFFER_BIT);\r\n            bulletScreensOnScreen.forEach((bulletScreenOnScreen) => {\r\n                if (this.checkWhetherHide(bulletScreenOnScreen)) return;\r\n                // 四个顶点坐标\r\n                let x1 = (bulletScreenOnScreen.x - 4) * devicePixelRatio;\r\n                let x2 = x1 + (bulletScreenOnScreen.width + 8) * devicePixelRatio;\r\n                let y1 = (bulletScreenOnScreen.actualY - 4) * devicePixelRatio;\r\n                let y2 = y1 + (bulletScreenOnScreen.height + 8) * devicePixelRatio;\r\n                //绑定纹理\r\n                _webglContext.bindTexture(_webglContext.TEXTURE_2D, bulletScreenOnScreen.texture2D);\r\n                //绑定范围\r\n                let positionBuffer = _webglContext.createBuffer();\r\n                // 将绑定点绑定到缓冲数据（positionBuffer）\r\n                _webglContext.bindBuffer(_webglContext.ARRAY_BUFFER, positionBuffer);\r\n                _webglContext.enableVertexAttribArray(_positionAttributeLocation);\r\n                // 告诉属性怎么从positionBuffer中读取数据 (ARRAY_BUFFER)\r\n                _webglContext.vertexAttribPointer(_positionAttributeLocation, 2, //size 每次迭代运行提取两个单位数据\r\n                    _webglContext.FLOAT, //type 每个单位的数据类型是32位浮点型\r\n                    false, //normalize 不需要归一化数据\r\n                    0, //stride 0 = 移动单位数量 * 每个单位占用内存（sizeof(type)）\r\n                    // 每次迭代运行运动多少内存到下一个数据开始点\r\n                    0 //offset 从缓冲起始位置开始读取\r\n                );\r\n                _webglContext.bufferData(_webglContext.ARRAY_BUFFER, new Float32Array([x1, y1,\r\n                    x2, y1,\r\n                    x1, y2,\r\n                    x1, y2,\r\n                    x2, y1,\r\n                    x2, y2]), _webglContext.STATIC_DRAW);\r\n                //绘制\r\n                _webglContext.drawArrays(_webglContext.TRIANGLES, //primitiveType\r\n                    0, //offset\r\n                    6 //count\r\n                );\r\n            }, true);\r\n        }\r\n\r\n        let _creatAndgetWidth = this.creatAndgetWidth;\r\n        /**\r\n         * 创建弹幕元素\r\n         * @override\r\n         * @param {object} bulletScreenOnScreen - 屏幕弹幕对象\r\n         */\r\n        this.creatAndgetWidth = function (bulletScreenOnScreen) {\r\n            _creatAndgetWidth(bulletScreenOnScreen);\r\n            let texture = _webglContext.createTexture();\r\n            _webglContext.bindTexture(_webglContext.TEXTURE_2D, texture);\r\n            // 设置参数\r\n            _webglContext.texParameteri(_webglContext.TEXTURE_2D, _webglContext.TEXTURE_MIN_FILTER, _webglContext.NEAREST);\r\n            _webglContext.texParameteri(_webglContext.TEXTURE_2D, _webglContext.TEXTURE_MAG_FILTER, _webglContext.NEAREST);\r\n            _webglContext.texParameteri(_webglContext.TEXTURE_2D, _webglContext.TEXTURE_WRAP_S, _webglContext.CLAMP_TO_EDGE);\r\n            _webglContext.texParameteri(_webglContext.TEXTURE_2D, _webglContext.TEXTURE_WRAP_T, _webglContext.CLAMP_TO_EDGE);\r\n            _webglContext.texImage2D(_webglContext.TEXTURE_2D, 0, _webglContext.RGBA, _webglContext.RGBA, _webglContext.UNSIGNED_BYTE, bulletScreenOnScreen.hideCanvas);\r\n            bulletScreenOnScreen.texture2D = texture;\r\n        }\r\n\r\n        let _setSize = this.setSize;\r\n        /**\r\n         * 设置尺寸\r\n         * @override\r\n         */\r\n        this.setSize = function () {\r\n            _setSize();\r\n            _webglContext.viewport(0, 0, _canvas.width, _canvas.height);\r\n            _webglContext.uniform2f(_resolutionUniformLocation, _canvas.width, _canvas.height); // 设置全局变量 分辨率\r\n        }\r\n\r\n        /**\r\n         * 初始化\r\n         */\r\n        function init() {\r\n            // 创建着色器方法，输入参数：渲染上下文，着色器类型，数据源\r\n            let createShader = function (gl, type, source) {\r\n                let shader = gl.createShader(type); // 创建着色器对象\r\n                gl.shaderSource(shader, source); // 提供数据源\r\n                gl.compileShader(shader); // 编译 -> 生成着色器\r\n                let success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n                if (success) {\r\n                    return shader;\r\n                }\r\n                gl.deleteShader(shader);\r\n            };\r\n            // 创建着色程序，输入参数：渲染上下文，顶点着色器，片段着色器\r\n            let createProgram = function (gl, vertexShader, fragmentShader) {\r\n                let program = gl.createProgram();\r\n                gl.attachShader(program, vertexShader);\r\n                gl.attachShader(program, fragmentShader);\r\n                gl.linkProgram(program);\r\n                let success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n                if (success) {\r\n                    return program;\r\n                }\r\n                gl.deleteProgram(program);\r\n            };\r\n            //顶点着色器代码\r\n            let vertexShaderSource = 'attribute vec2 a_position;';\r\n            vertexShaderSource += 'attribute vec2 a_texcoord;';\r\n            vertexShaderSource += 'uniform vec2 u_resolution;';\r\n            vertexShaderSource += 'varying vec2 v_texcoord;';\r\n            vertexShaderSource += 'void main() {';\r\n            // 从像素坐标转换到 0.0 到 1.0\r\n            vertexShaderSource += 'vec2 zeroToOne = a_position / u_resolution;';\r\n            // 再把 0->1 转换 0->2\r\n            vertexShaderSource += 'vec2 zeroToTwo = zeroToOne * 2.0;';\r\n            // 把 0->2 转换到 -1->+1 (裁剪空间)\r\n            vertexShaderSource += 'vec2 clipSpace = zeroToTwo - 1.0;';\r\n            vertexShaderSource += 'gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);';\r\n            // 传递纹理坐标到片断着色器\r\n            vertexShaderSource += 'v_texcoord = a_texcoord;';\r\n            vertexShaderSource += '}';\r\n            //片段着色器代码\r\n            let fragmentShaderSource = 'precision mediump float;';\r\n            // 从顶点着色器中传入的值\r\n            fragmentShaderSource += 'varying vec2 v_texcoord;';\r\n            // 纹理\r\n            fragmentShaderSource += 'uniform sampler2D u_texture;';\r\n            fragmentShaderSource += 'void main() {';\r\n            fragmentShaderSource += 'gl_FragColor = texture2D(u_texture, v_texcoord);';\r\n            fragmentShaderSource += '}';\r\n            _webglContext = _canvas.getContext('webgl');\r\n            _webglContext.enable(_webglContext.BLEND); //开启混合功能\r\n            _webglContext.clearColor(0, 0, 0, 0); //设置清除颜色\r\n            _webglContext.blendFunc(_webglContext.SRC_ALPHA, _webglContext.ONE_MINUS_SRC_ALPHA);\r\n            let vertexShader = createShader(_webglContext, _webglContext.VERTEX_SHADER, vertexShaderSource); //创建顶点着色器\r\n            let fragmentShader = createShader(_webglContext, _webglContext.FRAGMENT_SHADER, fragmentShaderSource); //创建片段着色器\r\n            let program = createProgram(_webglContext, vertexShader, fragmentShader); //创建着色程序\r\n            _webglContext.useProgram(program);\r\n            _positionAttributeLocation = _webglContext.getAttribLocation(program, 'a_position');\r\n            let texcoordAttributeLocation = _webglContext.getAttribLocation(program, 'a_texcoord');\r\n            _resolutionUniformLocation = _webglContext.getUniformLocation(program, 'u_resolution');\r\n            _webglContext.viewport(0, 0, _canvas.width, _canvas.height);\r\n            _webglContext.uniform2f(_resolutionUniformLocation, _canvas.width, _canvas.height); // 设置全局变量 分辨率\r\n            //绑定范围\r\n            let texcoordBuffer = _webglContext.createBuffer();\r\n            // 将绑定点绑定到缓冲数据（texcoordBuffer）\r\n            _webglContext.bindBuffer(_webglContext.ARRAY_BUFFER, texcoordBuffer);\r\n            _webglContext.enableVertexAttribArray(texcoordAttributeLocation);\r\n            // 以浮点型格式传递纹理坐标\r\n            _webglContext.vertexAttribPointer(texcoordAttributeLocation, 2, //size 每次迭代运行提取两个单位数据\r\n                _webglContext.FLOAT, //type 每个单位的数据类型是32位浮点型\r\n                false, //normalize 不需要归一化数据 \r\n                0, //stride 0 = 移动单位数量 * 每个单位占用内存（sizeof(type)）\r\n                // 每次迭代运行运动多少内存到下一个数据开始点\r\n                0 //offset 从缓冲起始位置开始读取\r\n            );\r\n            _webglContext.bufferData(_webglContext.ARRAY_BUFFER, new Float32Array([0, 0,\r\n                1, 0,\r\n                0, 1,\r\n                0, 1,\r\n                1, 0,\r\n                1, 1]), _webglContext.STATIC_DRAW);\r\n        }\r\n\r\n        /**\r\n         * 浏览器支持检测\r\n         * @throws {openBSE.BrowserNotSupportError} 浏览器不支持特定渲染模式时引发错误\r\n         */\r\n        function supportCheck() {\r\n            let canvas = document.createElement('canvas'); //canvas对象\r\n            if (typeof canvas.getContext != 'function') throw new BrowserNotSupportError('Canvas');\r\n            let context = canvas.getContext('2d');\r\n            if (context === null) throw new BrowserNotSupportError('Canvas 2D');\r\n            if (typeof context.fillText != 'function') throw new BrowserNotSupportError('Canvas 2D fillText Function');\r\n            canvas = document.createElement('canvas'); //canvas对象\r\n            context = canvas.getContext('webgl');\r\n            if (context === null) throw new BrowserNotSupportError('WebGL');\r\n        }\r\n    }\r\n}\r\n\r\nexport { WebGLRenderer };","import { Helper } from './lib/helper'\r\nconst BUILD = require('../build.json');\r\nBUILD.buildDate = require('./buildDate.json').buildDate;\r\n\r\n/**\r\n * openBSE 根命名空间\r\n * @namespace\r\n */\r\nlet openBSE = {\r\n    BulletScreenEngine: require('./bulletScreenEngine').BulletScreenEngine,\r\n    BrowserNotSupportError: require('./browserNotSupportError').BrowserNotSupportError,\r\n    BulletScreenType: require('./bulletScreenType').BulletScreenType,\r\n    /**\r\n     * 获取版本信息。\r\n     * @returns {openBSE~VersionInfo} 版本信息：一个 {@link openBSE~VersionInfo} 结构。\r\n     */\r\n    getVersion: function () {\r\n        return Helper.clone(BUILD);\r\n    }\r\n}\r\n\r\nexport { openBSE }\r\n\r\n/**\r\n * 全局选项\r\n * @typedef {object} openBSE~Options\r\n * @description Option 结构用于存放全局选项。\r\n * @property {number} [verticalInterval=8] - 弹幕垂直行间距\r\n * @property {number} [verticalInterval=1] - 弹幕播放速度（倍数）\r\n * @property {openBSE~clockCallback} [clock=time => new Date().getTime() - startTime] - 时间基准：此时间基准可指向一个方法用于获取播放器当前进度，这个方法返回值即为播放进度（单位：毫秒）。\r\n * @property {number} [scaling=1] 弹幕缩放比例（倍数）\r\n * @property {openBSE~BulletScreenStyle} [defaultStyle] 默认弹幕样式：一个 {@link openBSE~BulletScreenStyle} 结构。\r\n * @property {openBSE.BulletScreenType} [hiddenTypes=0] 隐藏的弹幕类型：一个 {@link openBSE.BulletScreenType} 枚举。将要隐藏的弹幕类型相加，0为不隐藏任何类型的弹幕。\r\n * @property {number} [opacity=1.0] 弹幕不透明度：取值范围 0.0 到 1.0，0.0 全透明；1.0 不透明。\r\n */\r\n\r\n/**\r\n * 时间基准回调方法\r\n * @callback openBSE~clockCallback\r\n * @description ClockCallback 回调方法用于播放器当前进度。\r\n * @returns {number} 播放进度：单位：毫秒。\r\n */\r\n\r\n/**\r\n * 单条弹幕数据\r\n * @typedef {object} openBSE~BulletScreen\r\n * @description BulletScreen 结构用于存放单条弹幕数据。\r\n * @property {string} text 弹幕文本\r\n * @property {boolean} [canDiscard=true] 是否允许丢弃：在弹幕过多时，程序将自动丢弃一些延迟过高的弹幕。此选项为 false 时本条弹幕无论如何都不会被丢弃，使用本选项的场景如本用户发送的弹幕。（注意：不要将太多的弹幕的 canDiscard 设为 false， 否则会因超时的弹幕不会被丢弃而造成意外的问题。）\r\n * @property {number} [startTime=options.clock()] 弹幕进入时间：单位：毫秒，默认为[时间基准（options.clock）]{@link openBSE~Options}当前时间。\r\n * @property {openBSE.BulletScreenType} [type=openBSE.BulletScreenType.rightToLeft] 弹幕类型：一个类型为 {@link openBSE.BulletScreenType} 的枚举。\r\n * @property {openBSE~BulletScreenStyle} style 弹幕样式：一个 {@link openBSE~BulletScreenStyle} 结构。设置此选项中的任何一个值，将覆盖对应的全局设置。\r\n * @property {any} more... 其他自定义字段：例如 uuid 、 id 等。（注意：因为在事件响应方法中返回的弹幕对象是原对象克隆的，所以无法直接比较，必须使用自定义字段唯一标识一条弹幕。）\r\n */\r\n\r\n/**\r\n * 弹幕样式\r\n * @typedef {object} openBSE~BulletScreenStyle\r\n * @description BulletScreenStyle 结构用于存放弹幕样式信息。\r\n * @property {number} [shadowBlur=2] 弹幕阴影的模糊级别：0为不显示阴影。\r\n * @property {string} [fontWeight=\"600\"] 字体粗细：可选值：lighter：更细；normal：标准；bold：粗体；bolder: 更粗；100、200、300、400、500、600、700、800、900：定义由粗到细的字符（400 等同于 normal；700 等同于 bold）。\r\n * @property {string} [fontFamily=\"sans-serif\"] 字体系列：弹幕的字体族名称或/及类族名称的一个优先表。（注意：如果使用了用“@font-face”定义的字体，请确保在使用前完全加载完成，否则弹幕可能无法显示。如果要预加载这些字体，建议使用 [Web Font Loader]{@link https://github.com/typekit/webfontloader} 。）\r\n * @property {number} [size=19] 字体大小：单位：像素。\r\n * @property {string} [boxColor] 外框颜色：参照CSS颜色设置方法，为 null 不显示外框。\r\n * @property {string} [color=\"white\"] 弹幕颜色：参照CSS颜色设置方法，为 null 不显示此弹幕。\r\n * @property {string} [borderColor] 描边颜色：参照CSS颜色设置方法，为 null 没有描边。\r\n * @property {number} [speed=0.15] 弹幕速度：单位：像素/毫秒，仅弹幕类型为0、1时有效。\r\n * @property {number} [residenceTime=5000] 弹幕停留时间：单位：毫秒，仅弹幕类型2、3时有效。\r\n */\r\n\r\n/**\r\n * 调试信息\r\n * @typedef {object} openBSE~DebugInfo\r\n * @description DebugInfo 结构用于存放调试信息。\r\n * @property {number} time [时间基准（options.clock）]{@link openBSE~Options}当前时间。\r\n * @property {number} bulletScreensOnScreenCount 实时弹幕总数\r\n * @property {number} bulletScreensCount 剩余弹幕总数\r\n * @property {number} delay 延迟：单位：毫秒。\r\n * @property {number} delayBulletScreensCount 丢弃弹幕数：因延迟过高而丢弃的弹幕总数。\r\n * @property {number} fps 帧频：单位：帧/秒。\r\n */\r\n\r\n/**\r\n * 版本信息\r\n * @typedef {object} openBSE~VersionInfo\r\n * @description VersionInfo 结构用于存放版本信息。\r\n * @property {string} version 版本号\r\n * @property {string} buildDate 构建日期：时区：UTC。\r\n */"]}