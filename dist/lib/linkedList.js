"use strict";

require("core-js/modules/es6.object.define-property");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LinkedList = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * 双向链表类
 */
var LinkedList =
/**
 * 创建一个双向链表。
 */
function LinkedList() {
  _classCallCheck(this, LinkedList);

  /**
   * 双向链表节点
   * @private
  */
  var node = function node(element) {
    _classCallCheck(this, node);

    this.element = element;
    this.next = null;
    this.previous = null;
  };

  var topNode = new node(null);
  var bottomNode = new node(null);
  var length = 0;
  topNode.next = bottomNode;
  bottomNode.previous = topNode;
  /**
   * 获取元素个数
   * @returns {number} 元素个数
   */

  this.getLength = function (l) {
    return length;
  };
  /**
   * 插入元素
   * @param {*} element - 元素
   * @param {boolean} top - true: 插入到顶部 false: 插入到底部
   */


  this.push = function (element, top) {
    var thisNode = new node(element);

    if (top) {
      thisNode.next = topNode.next;
      thisNode.previous = topNode;
      topNode.next = topNode.next.previous = thisNode;
    } else {
      thisNode.previous = bottomNode.previous;
      thisNode.next = bottomNode;
      bottomNode.previous = bottomNode.previous.next = thisNode;
    }

    length++;
  };
  /**
   * 读取元素
   * @param {boolean} remove - 读取后是否删除
   * @param {boolean} top - true: 读取顶部 false: 读取底部
   * @returns {*} 元素
   */


  this.pop = function (remove, top) {
    var thisNode;

    if (top) {
      thisNode = topNode.next;

      if (topNode.next != bottomNode && remove) {
        thisNode.next.previous = topNode;
        topNode.next = thisNode.next;
      }
    } else {
      thisNode = bottomNode.previous;

      if (bottomNode.previous != topNode && remove) {
        thisNode.previous.next = bottomNode;
        bottomNode.previous = thisNode.previous;
      }
    }

    if (remove) length--;
    return thisNode.element;
  };
  /**
   * 清空链表
   */


  this.clean = function () {
    topNode = new node(null);
    bottomNode = new node(null);
    topNode.next = bottomNode;
    bottomNode.previous = topNode;
    length = 0;
  };
  /**
   * 遍历链表
   * @param {function} fun - 遍历回调函数
   * 回调函数（参数：元素，返回：{remove：删除此元素，add:插入元素(add.addToUp:插入到上方, add.element:元素), stop：停止遍历}）
   * @param {boolean} topToBottom - true: 从顶到底 false: 从底到顶
   */


  this.forEach = function (fun, topToBottom) {
    var thisNode = topToBottom ? topNode : bottomNode;

    while (topToBottom ? (thisNode = thisNode.next) != bottomNode : (thisNode = thisNode.previous) != topNode) {
      var _return = fun(thisNode.element);

      if (_return) {
        if (_return.add) {
          var newNode = new node(_return.add.element);

          if (_return.add.addToUp) {
            newNode.previous = thisNode.previous;
            newNode.next = thisNode;
            thisNode.previous.next = newNode;
            thisNode.previous = newNode;
          } else {
            newNode.previous = thisNode;
            newNode.next = thisNode.next;
            thisNode.next.previous = newNode;
            thisNode.next = newNode;
          }

          length++;
        }

        if (_return.remove) {
          thisNode.previous.next = thisNode.next;
          thisNode.next.previous = thisNode.previous;
          length--;
        }

        if (_return.stop) {
          return;
        }
      }
    }
  };
};

exports.LinkedList = LinkedList;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9saW5rZWRMaXN0LmpzIl0sIm5hbWVzIjpbIkxpbmtlZExpc3QiLCJub2RlIiwiZWxlbWVudCIsIm5leHQiLCJwcmV2aW91cyIsInRvcE5vZGUiLCJib3R0b21Ob2RlIiwibGVuZ3RoIiwiZ2V0TGVuZ3RoIiwibCIsInB1c2giLCJ0b3AiLCJ0aGlzTm9kZSIsInBvcCIsInJlbW92ZSIsImNsZWFuIiwiZm9yRWFjaCIsImZ1biIsInRvcFRvQm90dG9tIiwiX3JldHVybiIsImFkZCIsIm5ld05vZGUiLCJhZGRUb1VwIiwic3RvcCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7O0lBR01BLFU7QUFDRjs7O0FBR0Esc0JBQWM7QUFBQTs7QUFDVjs7OztBQURVLE1BS0pDLElBTEksR0FNTixjQUFZQyxPQUFaLEVBQXFCO0FBQUE7O0FBQ2pCLFNBQUtBLE9BQUwsR0FBZUEsT0FBZjtBQUNBLFNBQUtDLElBQUwsR0FBWSxJQUFaO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQixJQUFoQjtBQUNILEdBVks7O0FBYVYsTUFBSUMsT0FBTyxHQUFHLElBQUlKLElBQUosQ0FBUyxJQUFULENBQWQ7QUFDQSxNQUFJSyxVQUFVLEdBQUcsSUFBSUwsSUFBSixDQUFTLElBQVQsQ0FBakI7QUFDQSxNQUFJTSxNQUFNLEdBQUcsQ0FBYjtBQUNBRixFQUFBQSxPQUFPLENBQUNGLElBQVIsR0FBZUcsVUFBZjtBQUNBQSxFQUFBQSxVQUFVLENBQUNGLFFBQVgsR0FBc0JDLE9BQXRCO0FBRUE7Ozs7O0FBSUEsT0FBS0csU0FBTCxHQUFpQixVQUFBQyxDQUFDO0FBQUEsV0FBSUYsTUFBSjtBQUFBLEdBQWxCO0FBQ0E7Ozs7Ozs7QUFLQSxPQUFLRyxJQUFMLEdBQVksVUFBVVIsT0FBVixFQUFtQlMsR0FBbkIsRUFBd0I7QUFDaEMsUUFBSUMsUUFBUSxHQUFHLElBQUlYLElBQUosQ0FBU0MsT0FBVCxDQUFmOztBQUNBLFFBQUlTLEdBQUosRUFBUztBQUNMQyxNQUFBQSxRQUFRLENB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WUFBQUEsUUFBUSxDQUFDUixRQUFULENBQWtCRCxJQUFsQixHQUF5QmtCLE9BQXpCO0FBQ0FULFlBQUFBLFFBQVEsQ0FBQ1IsUUFBVCxHQUFvQmlCLE9BQXBCO0FBQ0gsV0FMRCxNQU1LO0FBQ0RBLFlBQUFBLE9BQU8sQ0FBQ2pCLFFBQVIsR0FBbUJRLFFBQW5CO0FBQ0FTLFlBQUFBLE9BQU8sQ0FBQ2xCLElBQVIsR0FBZVMsUUFBUSxDQUFDVCxJQUF4QjtBQUNBUyxZQUFBQSxRQUFRLENBQUNULElBQVQsQ0FBY0MsUUFBZCxHQUF5QmlCLE9BQXpCO0FBQ0FULFlBQUFBLFFBQVEsQ0FBQ1QsSUFBVCxHQUFnQmtCLE9BQWhCO0FBQ0g7O0FBQ0RkLFVBQUFBLE1BQU07QUFDVDs7QUFDRCxZQUFJWSxPQUFPLENBQUNMLE1BQVosRUFBb0I7QUFDaEJGLFVBQUFBLFFBQVEsQ0FBQ1IsUUFBVCxDQUFrQkQsSUFBbEIsR0FBeUJTLFFBQVEsQ0FBQ1QsSUFBbEM7QUFDQVMsVUFBQUEsUUFBUSxDQUFDVCxJQUFULENBQWNDLFFBQWQsR0FBeUJRLFFBQVEsQ0FBQ1IsUUFBbEM7QUFDQUcsVUFBQUEsTUFBTTtBQUNUOztBQUNELFlBQUlZLE9BQU8sQ0FBQ0ksSUFBWixFQUFrQjtBQUNkO0FBQ0g7QUFDSjtBQUNKO0FBQ0osR0FoQ0Q7QUFpQ0gsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICog5Y+M5ZCR6ZO+6KGo57G7XG4gKi9cbmNsYXNzIExpbmtlZExpc3Qge1xuICAgIC8qKlxuICAgICAqIOWIm+W7uuS4gOS4quWPjOWQkemTvuihqOOAglxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICog5Y+M5ZCR6ZO+6KGo6IqC54K5XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICovXG4gICAgICAgIGNsYXNzIG5vZGUge1xuICAgICAgICAgICAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLnByZXZpb3VzID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvL+WIneWni+WMllxuICAgICAgICBsZXQgdG9wTm9kZSA9IG5ldyBub2RlKG51bGwpO1xuICAgICAgICBsZXQgYm90dG9tTm9kZSA9IG5ldyBub2RlKG51bGwpO1xuICAgICAgICBsZXQgbGVuZ3RoID0gMDtcbiAgICAgICAgdG9wTm9kZS5uZXh0ID0gYm90dG9tTm9kZTtcbiAgICAgICAgYm90dG9tTm9kZS5wcmV2aW91cyA9IHRvcE5vZGU7XG4gICAgICAgIC8v5YWs5YWx5Ye95pWwXG4gICAgICAgIC8qKlxuICAgICAgICAgKiDojrflj5blhYPntKDkuKrmlbBcbiAgICAgICAgICogQHJldHVybnMge251bWJlcn0g5YWD57Sg5Liq5pWwXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmdldExlbmd0aCA9IGwgPT4gbGVuZ3RoO1xuICAgICAgICAvKipcbiAgICAgICAgICog5o+S5YWl5YWD57SgXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gZWxlbWVudCAtIOWFg+e0oFxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHRvcCAtIHRydWU6IOaPkuWFpeWIsOmhtumDqCBmYWxzZTog5o+S5YWl5Yiw5bqV6YOoXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnB1c2ggPSBmdW5jdGlvbiAoZWxlbWVudCwgdG9wKSB7XG4gICAgICAgICAgICBsZXQgdGhpc05vZGUgPSBuZXcgbm9kZShlbGVtZW50KTtcbiAgICAgICAgICAgIGlmICh0b3ApIHtcbiAgICAgICAgICAgICAgICB0aGlzTm9kZS5uZXh0ID0gdG9wTm9kZS5uZXh0O1xuICAgICAgICAgICAgICAgIHRoaXNOb2RlLnByZXZpb3VzID0gdG9wTm9kZTtcbiAgICAgICAgICAgICAgICB0b3BOb2RlLm5leHQgPSB0b3BOb2RlLm5leHQucHJldmlvdXMgPSB0aGlzTm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXNOb2RlLnByZXZpb3VzID0gYm90dG9tTm9kZS5wcmV2aW91cztcbiAgICAgICAgICAgICAgICB0aGlzTm9kZS5uZXh0ID0gYm90dG9tTm9kZTtcbiAgICAgICAgICAgICAgICBib3R0b21Ob2RlLnByZXZpb3VzID0gYm90dG9tTm9kZS5wcmV2aW91cy5uZXh0ID0gdGhpc05vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZW5ndGgrKztcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOivu+WPluWFg+e0oFxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlbW92ZSAtIOivu+WPluWQjuaYr+WQpuWIoOmZpFxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHRvcCAtIHRydWU6IOivu+WPlumhtumDqCBmYWxzZTog6K+75Y+W5bqV6YOoXG4gICAgICAgICAqIEByZXR1cm5zIHsqfSDlhYPntKBcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucG9wID0gZnVuY3Rpb24gKHJlbW92ZSwgdG9wKSB7XG4gICAgICAgICAgICBsZXQgdGhpc05vZGU7XG4gICAgICAgICAgICBpZiAodG9wKSB7XG4gICAgICAgICAgICAgICAgdGhpc05vZGUgPSB0b3BOb2RlLm5leHQ7XG4gICAgICAgICAgICAgICAgaWYgKHRvcE5vZGUubmV4dCAhPSBib3R0b21Ob2RlICYmIHJlbW92ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzTm9kZS5uZXh0LnByZXZpb3VzID0gdG9wTm9kZTtcbiAgICAgICAgICAgICAgICAgICAgdG9wTm9kZS5uZXh0ID0gdGhpc05vZGUubmV4dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzTm9kZSA9IGJvdHRvbU5vZGUucHJldmlvdXM7XG4gICAgICAgICAgICAgICAgaWYgKGJvdHRvbU5vZGUucHJldmlvdXMgIT0gdG9wTm9kZSAmJiByZW1vdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc05vZGUucHJldmlvdXMubmV4dCA9IGJvdHRvbU5vZGU7XG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbU5vZGUucHJldmlvdXMgPSB0aGlzTm9kZS5wcmV2aW91cztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVtb3ZlKVxuICAgICAgICAgICAgICAgIGxlbmd0aC0tO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNOb2RlLmVsZW1lbnQ7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiDmuIXnqbrpk77ooahcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2xlYW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0b3BOb2RlID0gbmV3IG5vZGUobnVsbCk7XG4gICAgICAgICAgICBib3R0b21Ob2RlID0gbmV3IG5vZGUobnVsbCk7XG4gICAgICAgICAgICB0b3BOb2RlLm5leHQgPSBib3R0b21Ob2RlO1xuICAgICAgICAgICAgYm90dG9tTm9kZS5wcmV2aW91cyA9IHRvcE5vZGU7XG4gICAgICAgICAgICBsZW5ndGggPSAwO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICog6YGN5Y6G6ZO+6KGoXG4gICAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1biAtIOmBjeWOhuWbnuiwg+WHveaVsFxuICAgICAgICAgKiDlm57osIPlh73mlbDvvIjlj4LmlbDvvJrlhYPntKDvvIzov5Tlm57vvJp7cmVtb3Zl77ya5Yig6Zmk5q2k5YWD57Sg77yMYWRkOuaPkuWFpeWFg+e0oChhZGQuYWRkVG9VcDrmj5LlhaXliLDkuIrmlrksIGFkZC5lbGVtZW50OuWFg+e0oCksIHN0b3DvvJrlgZzmraLpgY3ljoZ977yJXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gdG9wVG9Cb3R0b20gLSB0cnVlOiDku47pobbliLDlupUgZmFsc2U6IOS7juW6leWIsOmhtlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5mb3JFYWNoID0gZnVuY3Rpb24gKGZ1biwgdG9wVG9Cb3R0b20pIHtcbiAgICAgICAgICAgIGxldCB0aGlzTm9kZSA9IHRvcFRvQm90dG9tID8gdG9wTm9kZSA6IGJvdHRvbU5vZGU7XG4gICAgICAgICAgICB3aGlsZSAodG9wVG9Cb3R0b20gP1xuICAgICAgICAgICAgICAgICh0aGlzTm9kZSA9IHRoaXNOb2RlLm5leHQpICE9IGJvdHRvbU5vZGUgOiAodGhpc05vZGUgPSB0aGlzTm9kZS5wcmV2aW91cykgIT0gdG9wTm9kZSkge1xuICAgICAgICAgICAgICAgIGxldCBfcmV0dXJuID0gZnVuKHRoaXNOb2RlLmVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGlmIChfcmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfcmV0dXJuLmFkZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5ld05vZGUgPSBuZXcgbm9kZShfcmV0dXJuLmFkZC5lbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfcmV0dXJuLmFkZC5hZGRUb1VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZS5wcmV2aW91cyA9IHRoaXNOb2RlLnByZXZpb3VzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUubmV4dCA9IHRoaXNOb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNOb2RlLnByZXZpb3VzLm5leHQgPSBuZXdOb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNOb2RlLnByZXZpb3VzID0gbmV3Tm9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUucHJldmlvdXMgPSB0aGlzTm9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlLm5leHQgPSB0aGlzTm9kZS5uZXh0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNOb2RlLm5leHQucHJldmlvdXMgPSBuZXdOb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNOb2RlLm5leHQgPSBuZXdOb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGVuZ3RoKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKF9yZXR1cm4ucmVtb3ZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzTm9kZS5wcmV2aW91cy5uZXh0ID0gdGhpc05vZGUubmV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNOb2RlLm5leHQucHJldmlvdXMgPSB0aGlzTm9kZS5wcmV2aW91cztcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aC0tO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChfcmV0dXJuLnN0b3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnQge0xpbmtlZExpc3R9Il0sImZpbGUiOiJsaWIvbGlua2VkTGlzdC5qcyJ9
