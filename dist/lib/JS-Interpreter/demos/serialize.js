/**
 * @license
 * JavaScript Interpreter: serialization and deserialization
 *
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Saving and restoring the state of a JS-Intepreter.
 * @author fraser@google.com (Neil Fraser)
 */
'use strict';

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.date.to-json");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.number.constructor");

require("core-js/modules/es.object.create");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.get-own-property-descriptor");

require("core-js/modules/es.object.get-own-property-names");

require("core-js/modules/es.object.get-prototype-of");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.flags");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/web.url.to-json");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function deserialize(json, interpreter) {
  function decodeValue(value) {
    if (value && _typeof(value) === 'object') {
      var data;

      if (data = value['#']) {
        value = objectList[data];

        if (!value) {
          throw ReferenceError('Object reference not found: ' + data);
        }

        return value;
      }

      if (data = value['Number']) {
        return Number(data);
      }

      if (data = value['Value']) {
        if (value['Value'] === 'undefined') {
          return undefined;
        }
      }
    }

    return value;
  }

  var stack = interpreter.stateStack;

  if (!Array.isArray(json)) {
    throw TypeError('Top-level JSON is not a list.');
  }

  if (!stack.length) {
    throw Error('Interpreter must be initialized prior to deserialization.');
  }

  var objectList = [];
  objectHunt_(stack, objectList);
  var functionHash = Object.create(null);

  for (var i = 0; i < objectList.length; i++) {
    if (typeof objectList[i] == 'function') {
      functionHash[objectList[i].id] = objectList[i];
    }
  }

  objectList = [];

  for (var i = 0; i < json.length; i++) {
    var jsonObj = json[i];
    var obj;

    switch (jsonObj['type']) {
      case 'Map':
        obj = Object.create(null);
        break;

      case 'Object':
        obj = {};
        break;

      case 'ScopeReference':
        obj = Interpreter.SCOPE_REFERENCE;
        break;

      case 'Function':
        obj = functionHash[jsonObj['id']];

        if (!obj) {
          throw RangeError('Function ID not found: ' + jsonObj['id']);
        }

        break;

      case 'Array':
        obj = [];
        break;

      case 'Date':
        obj = new Date(jsonObj['data']);

        if (isNaN(obj)) {
          throw TypeError('Invalid date: ' + jsonObj['data']);
        }

        break;

      case 'RegExp':
        obj = RegExp(jsonObj['source'], jsonObj['flags']);
        break;

      case 'PseudoObject':
        obj = new Interpreter.Object(null);
        break;

      case 'State':
        obj = new Interpreter.State(undefined, undefined);
        break;

      case 'Node':
        obj = new interpreter.nodeConstructor();
        break;

      default:
        throw TypeError('Unknown type: ' + jsonObj['type']);
    }

    objectList[i] = obj;
  }

  for (var i = 0; i < json.length; i++) {
    var jsonObj = json[i];
    var obj = objectList[i];
    var props = jsonObj['props'];

    if (props) {
      var nonConfigurable = jsonObj['nonConfigurable'] || [];
      var nonEnumerable = jsonObj['nonEnumerable'] || [];
      var nonWritable = jsonObj['nonWritable'] || [];
      var names = Object.getOwnPropertyNames(props);

      for (var j = 0; j < names.length; j++) {
        var name = names[j];
        Object.defineProperty(obj, name, {
          configurable: nonConfigurable.indexOf(name) === -1,
          enumerable: nonEnumerable.indexOf(name) === -1,
          writable: nonWritable.indexOf(name) === -1,
          value: decodeValue(props[name])
        });
      }
    }

    if (Array.isArray(obj)) {
      var data = jsonObj['data'];

      if (data) {
        for (var j = 0; j < data.length; j++) {
          obj.push(decodeValue(data[j]));
        }
      }
    }
  }

  var root = objectList[0];

  for (var prop in root) {
    interpreter[prop] = root[prop];
  }
}

function serialize(interpreter) {
  function encodeValue(value) {
    if (value && (_typeof(value) === 'object' || typeof value === 'function')) {
      var ref = objectList.indexOf(value);

      if (ref === -1) {
        throw RangeError('Object not found in table.');
      }

      return {
        '#': ref
      };
    }

    if (value === undefined) {
      return {
        'Value': 'undefined'
      };
    }

    if (typeof value === 'number') {
      if (value === Infinity) {
        return {
          'Number': 'Infinity'
        };
      } else if (value === -Infinity) {
        return {
          'Number': '-Infinity'
        };
      } else if (isNaN(value)) {
        return {
          'Number': 'NaN'
        };
      } else if (1 / value === -Infinity) {
        return {
          'Number': '-0'
        };
      }
    }

    return value;
  }

  var properties = ['OBJECT', 'OBJECT_PROTO', 'FUNCTION', 'FUNCTION_PROTO', 'ARRAY', 'ARRAY_PROTO', 'REGEXP', 'REGEXP_PROTO', 'BOOLEAN', 'DATE', 'NUMBER', 'STRING', 'ERROR', 'EVAL_ERROR', 'RANGE_ERROR', 'REFERENCE_ERROR', 'SYNTAX_ERROR', 'TYPE_ERROR', 'URI_ERROR', 'global', 'stateStack'];
  var root = Object.create(null);

  for (var i = 0; i < properties.length; i++) {
    root[properties[i]] = interpreter[properties[i]];
  }

  var objectList = [];
  objectHunt_(root, objectList);
  var json = [];

  for (var i = 0; i < objectList.length; i++) {
    var jsonObj = Object.create(null);
    json.push(jsonObj);
    var obj = objectList[i];

    switch (Object.getPrototypeOf(obj)) {
      case null:
        jsonObj['type'] = 'Map';
        break;

      case Object.prototype:
        if (obj === Interpreter.SCOPE_REFERENCE) {
          jsonObj['type'] = 'ScopeReference';
          continue;
        } else {
          jsonObj['type'] = 'Object';
        }

        break;

      case Function.prototype:
        jsonObj['type'] = 'Function';
        jsonObj['id'] = obj.id;

        if (obj.id === undefined) {
          throw Error('Native function has no ID: ' + obj);
        }

        continue;

      case Array.prototype:
        jsonObj['type'] = 'Array';

        if (obj.length) {
          jsonObj['data'] = obj.map(encodeValue);
        }

        continue;

      case Date.prototype:
        jsonObj['type'] = 'Date';
        jsonObj['data'] = obj.toJSON();
        continue;

      case RegExp.prototype:
        jsonObj['type'] = 'RegExp';
        jsonObj['source'] = obj.source;
        jsonObj['flags'] = obj.flags;
        continue;

      case Interpreter.Object.prototype:
        jsonObj['type'] = 'PseudoObject';
        break;

      case Interpreter.State.prototype:
        jsonObj['type'] = 'State';
        break;

      case interpreter.nodeConstructor.prototype:
        jsonObj['type'] = 'Node';
        break;

      default:
        throw TypeError('Unknown type: ' + obj);
    }

    var props = Object.create(null);
    var nonConfigurable = [];
    var nonEnumerable = [];
    var nonWritable = [];
    var names = Object.getOwnPropertyNames(obj);

    for (var j = 0; j < names.length; j++) {
      var name = names[j];
      props[name] = encodeValue(obj[name]);
      var descriptor = Object.getOwnPropertyDescriptor(obj, name);

      if (!descriptor.configurable) {
        nonConfigurable.push(name);
      }

      if (!descriptor.enumerable) {
        nonEnumerable.push(name);
      }

      if (!descriptor.writable) {
        nonWritable.push(name);
      }
    }

    if (names.length) {
      jsonObj['props'] = props;
    }

    if (nonConfigurable.length) {
      jsonObj['nonConfigurable'] = nonConfigurable;
    }

    if (nonEnumerable.length) {
      jsonObj['nonEnumerable'] = nonEnumerable;
    }

    if (nonWritable.length) {
      jsonObj['nonWritable'] = nonWritable;
    }
  }

  return json;
}

function objectHunt_(node, objectList) {
  if (node && (_typeof(node) === 'object' || typeof node === 'function')) {
    if (objectList.indexOf(node) != -1) {
      return;
    }

    objectList.push(node);

    if (_typeof(node) === 'object') {
      var names = Object.getOwnPropertyNames(node);

      for (var i = 0; i < names.length; i++) {
        objectHunt_(node[names[i]], objectList);
      }
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
